{"version":3,"sources":["../../local/lib/node_modules/browserify/node_modules/browser-pack/_prelude.js","index.js","lib/test.js","lib/pipeline.js","lib/globals.js","lib/sgemmcalculator.js","lib/saxpycalculator.js","lib/sclmpcalculator.js","lib/sscalcalculator.js","lib/sdwnscalculator.js","lib/tensor.js","node_modules/async/lib/async.js","node_modules/arrayloader/lib/xhr-loader.js","lib/webgl.js","../../local/lib/node_modules/browserify/node_modules/process/browser.js","lib/slokncalculator.js"],"names":["sgemm","M","N","K","alpha","A","B","beta","C","length","Error","texels1","texels0","texels2","transpose","texture0","gl","createDataTexture","texture1","texture2","texture3","createOutputTexture","sgemmcalculator","calculate","rawBuffer","readData","context","deleteTexture","Float32Array","saxpy","a","X","Y","isFloat32Array","fill","saxpycalculator","obj","Object","prototype","toString","call","sscal","b","sscalcalculator","sstd","mu","sigma","sdwns","channels","factor","stride","N_out","Math","floor","M_out","sdwnscalculator","sclmp","Number","MIN_VALUE","MAX_VALUE","sclmpcalculator","isNumeric","parseFloat","fromArray","array","type","tranpose","data","c","shape","ii","jj","r","typedArray","result","constructor","i","j","globals","require","pipeline","SGEMMCalculator","SAXPYCalculator","SSCALCalculator","SDWNSCalculator","SCLMPCalculator","test","module","exports","gpu","bind","encode","util","String","format","args","arguments","this","replace","match","number","loadFloat32Array","path","cb","loader","load","async","allclose","RTOL","ATOL","console","log","index","abs","randomArray","row","random","sqrt","push","padData","pad","padded","set","subarray","submatrix","offset","testDirectory","matrixFiles","callback","testFiles","map","item","err","results","assert","t","msg","ok","actual","expected","_assert","message","operator","extra","t0","tOut","Tensor","texture","t1","t2","slokn","margin","N_p","M_p","ceil","P_p","slokncalculator","SLOKNCalculator","WebGL","webgl","standalone","s","s_c","p","p_c","program_","createProgram","program_c","TEXTURE_UNIFORM_NAME_0","TEXTURE_UNIFORM_NAME_1","TEXTURE_UNIFORM_NAME_2","SHARED_LENGTH_UNIFORM_NAME","COLUMN_COUNT_UNIFORM_NAME","PAD_UNIFORM_NAME","ALPHA_UNIFORM_NAME","BETA_UNIFORM_NAME","out","program","selectProgram","bindInputTexture","TEXTURE0","TEXTURE1","TEXTURE2","kPad","getPad","nPad","bindUniforms","bindOutputTexture","drawElements","TRIANGLES","UNSIGNED_SHORT","unbindInputTexture","textureUnit","name","activeTexture","bindTexture","TEXTURE_2D","sampler","getUniformLocation","uniform1i","K_gl","alpha_gl","beta_gl","N_gl","pad_gl","uniform1f","LENGTH_UNIFORM_NAME","COEFFICIENT_UNIFORM_NAME","a_gl","LOWER_UNIFORM_NAME","UPPER_UNIFORM_NAME","b_gl","ADD_UNIFORM_NAME","MUL_UNIFORM_NAME","DownsampleCalculator","INPUT_ROW_COUNT_UNIFORM_NAME","INPUT_COLUMN_COUNT_UNIFORM_NAME","OUTPUT_ROW_COUNT_UNIFORM_NAME","OUTPUT_COLUMN_COUNT_UNIFORM_NAME","FACTOR_UNIFORM_NAME","STRIDE_UNIFORM_NAME","CHANNEL_COUNT_UNIFORM_NAME","COMPONENTS_PER_TEXEL","M_gl","M_out_gl","N_out_gl","factor_gl","stride_gl","channel_count_gl","delete","transfer","keep","reshape","tT","split","combine","noop","identity","v","toBool","notId","only_once","fn","apply","_once","_isArrayLike","arr","_isArray","_arrayEach","iterator","_map","Array","_range","count","_reduce","memo","x","_forEachOf","object","_keys","key","_indexOf","_keyIterator","coll","len","keys","_restParam","func","startIndex","max","rest","_withoutIndex","value","_eachOfLimit","limit","nextKey","done","running","errored","replenish","doParallel","eachOf","doParallelLimit","doSeries","eachOfSeries","_asyncMap","eachfn","_filter","sort","_reject","_createTester","check","getResult","iteratee","_","_findGetResult","_parallel","tasks","task","_concat","y","concat","_queue","worker","concurrency","payload","_insert","q","pos","started","idle","setImmediate","drain","unshift","saturated","process","_next","workers","removed","workersList","splice","empty","paused","kill","pause","resume","resumeCount","min","w","_console_fn","error","_times","mapper","_applyEach","fns","go","that","pop","ensureAsync","innerArgs","sync","previous_async","root","self","global","noConflict","_toString","isArray","_isObject","k","hasOwnProperty","_setImmediate","_delay","setTimeout","nextTick","forEach","each","forEachSeries","eachSeries","forEachLimit","eachLimit","forEachOf","completed","iter","forEachOfSeries","iterate","forEachOfLimit","eachOfLimit","mapSeries","mapLimit","inject","foldl","reduce","foldr","reduceRight","reversed","reverse","transform","select","filter","selectLimit","filterLimit","selectSeries","filterSeries","reject","rejectLimit","rejectSeries","any","some","someLimit","all","every","everyLimit","detect","detectSeries","detectLimit","sortBy","comparator","left","right","criteria","auto","addListener","listeners","removeListener","idx","taskComplete","remainingTasks","slice","runningTasks","hasError","ready","requires","listener","taskCallback","dep","safeResults","val","rkey","join","retry","times","parseTimes","acc","parseInt","DEFAULT_TIMES","interval","DEFAULT_INTERVAL","wrappedTask","wrappedCallback","wrappedResults","retryAttempt","finalAttempt","seriesCallback","retryInterval","opts","attempts","series","waterfall","wrapIterator","next","parallel","parallelLimit","makeCallback","callArgs","concatSeries","whilst","doWhilst","calls","until","doUntil","during","truth","doDuring","queue","items","priorityQueue","_compareTasks","priority","_binarySearch","sequence","compare","beg","end","mid","cargo","dir","memoize","hasher","queues","has","memoized","l","unmemoized","unmemoize","timesSeries","timesLimit","seq","newargs","nextargs","compose","applyEach","applyEachSeries","forever","constant","values","wrapSync","asyncify","e","then","define","amd","url","xhr","XMLHttpRequest","onreadystatechange","readyState","status","arrayBuffer","response","errno","open","responseType","send","options","glOptions","ext","canvas","document","createElement","premultipliedAlpha","preserveDrawingBuffer","getContext","getExtension","hasFloat","highp","getShaderPrecisionFormat","FRAGMENT_SHADER","HIGH_FLOAT","hasHighPrecision","precision","passThrough","vertexShader","createShader","VERTEX_SHADER","shaderSource","compileShader","reshape_simple","encode_program","transpose_program","reshape_program","reshape_simple_program","submatrix_program","combine_program","POSITION_UNIFORM_NAME","TEXTURE_UNIFORM_NAME","npad","mpad","npad_gl","mpad_gl","pad_out","M_in_gl","N_in_gl","pad_in_gl","offset_gl","fragmentShaderSource","fragmentShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","attachShader","linkProgram","useProgram","bindVertices","renderer","position","getAttribLocation","vertexBuffer","createBuffer","bindBuffer","ARRAY_BUFFER","vertices","bufferData","STATIC_DRAW","vertexAttribPointer","FLOAT","enableVertexAttribArray","texCoords","textureCoords","indices","ELEMENT_ARRAY_BUFFER","vertexIndices","Uint16Array","h","texels","PAD_TEMPLATE","rem","createTexture","texImage2D","RGBA","remainder","full_texel_row_len","full_row_texture_width","row_start","last_texel","full_texel_row_end","buffer","BYTES_PER_ELEMENT","texSubImage2D","texParameteri","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","TEXTURE_MAG_FILTER","NEAREST","TEXTURE_MIN_FILTER","destTexture","UNSIGNED_BYTE","height","width","viewport","framebuffer","createFramebuffer","bindFramebuffer","FRAMEBUFFER","framebufferTexture2D","COLOR_ATTACHMENT0","checkFramebufferStatus","FRAMEBUFFER_COMPLETE","rawbuffer","ArrayBuffer","prod","Uint8Array","readPixels","defaultSetTimout","defaultClearTimeout","runTimeout","fun","cachedSetTimeout","runClearTimeout","marker","cachedClearTimeout","clearTimeout","cleanUpNextTick","draining","currentQueue","queueIndex","drainQueue","timeout","run","Item","title","browser","env","argv","version","versions","on","once","off","removeAllListeners","emit","binding","cwd","chdir","umask","KERNEL_WIDTH_UNIFORM_NAME","M_in","N_in","pad_in","c_gl","N_p_gl","margin_gl"],"mappings":"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","file":"bundle.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","var globals = require('./lib/globals'),\n\tpipeline = require(\"./lib/pipeline\"),\n\tSGEMMCalculator = require(\"./lib/sgemmcalculator\"),\n\tSAXPYCalculator = require(\"./lib/saxpycalculator\"),\n\tSSCALCalculator = require(\"./lib/sscalcalculator\"),\n\tSDWNSCalculator = require(\"./lib/sdwnscalculator\"),\n\tSCLMPCalculator = require(\"./lib/sclmpcalculator\"),\n\ttest = require(\"./lib/test\");\n\nvar gl = globals.gl,\n\tsgemmcalculator = new SGEMMCalculator(gl),\n\tsaxpycalculator = new SAXPYCalculator(gl),\n\tsscalcalculator = new SSCALCalculator(gl),\n\tsdwnscalculator = new SDWNSCalculator(gl),\n\tsclmpcalculator = new SCLMPCalculator(gl);\n\nmodule.exports = {\n\t// level one\n\t\"saxpy\" : saxpy,\n\t\"sscal\" : sscal,   // single precision matrix scale\n\t// level two\n\t// level three\n\t\"sgemm\" : sgemm,   // single precision generalized matrix multiply\n\t// extra\n\t\"sstd\" : sstd,     // single precision Standard Score normalization\n\t\"sdwns\": sdwns,\n\t\"sclmp\": sclmp,\n\t// pipeline\n\t\"pipeline\" : pipeline,\n\t// internals\n\t\"gpu\" : {\t\"gl\": gl,\n\t \t\t\t\"sgemm\": pipeline.sgemmcalculator.calculate.bind(pipeline.sgemmcalculator),\n\t\t\t\t\"sscal\" : pipeline.sscalcalculator.calculate.bind(pipeline.sscalcalculator),\n\t\t\t\t\"sclmp\" : pipeline.sclmpcalculator.calculate.bind(pipeline.sclmpcalculator),\n\t\t\t\t\"sdwns\" : pipeline.sdwnscalculator.calculate.bind(pipeline.sdwnscalculator),\n\t\t\t\t\"encode\" : gl.encode.bind(gl)\n\t\t\t},\n\t\"util\" : { \"fromArray\" : fromArray, \"transpose\" : transpose},\n\t\"test\" : test\n};\n\n\n/* Wrap the GL calculation object in a (relatively) user friendly function that\n\taccepts TypedArrays\n\n\t* convert the data to (padded) textures in GPU memory\n\t* execute calculation\n\t* read result into an array, and return\n */\nfunction sgemm(M, N, K, alpha, A, B, beta, C){\n\n\tif(C != null && C.length != N){\n\t\tthrow new Error(\"Only vector C with length matching rows in A is currently supported.\");\n\t}\n\n\t// pack each matrix into a single RGBA texel array, with the second transposed\n\tvar texels0 = A,\n\t\ttexels1,\n\t\ttexels2 = C;\n\n\n\ttexels1 = transpose(K, N, B);\n\n\t// create input textures from data\n\tvar texture0 = gl.createDataTexture(M, K, texels0);\n\tvar texture1 = gl.createDataTexture(N, K, texels1);\n\tvar texture2 = null;\n\tif(texels2 != null){\n\t\ttexture2 = gl.createDataTexture(1, N, texels2);\n\t}\n\n\tvar texture3 = gl.createOutputTexture(M, N);\n\n\tsgemmcalculator.calculate(M, N, K, alpha, texture0, texture1, beta, texture2, texture3);\n\n\t// retrieve data\n\trawBuffer = gl.readData(M, N);\n\n\t// clean up\n\tgl.context.deleteTexture(texture0);\n\tgl.context.deleteTexture(texture1);\n\tif(texture2 != null){\n\t\tgl.context.deleteTexture(texture2);\n\t}\n\tgl.context.deleteTexture(texture3);\n\n\t// return result\n\treturn new Float32Array(rawBuffer);\n\n}\n\nfunction saxpy(N, a, X, Y){\n\n\tvar rawBuffer;\n\n\n\tvar texels0 = X,\n\t\ttexels1;\n\n\t// TODO: special shader for constant Y\n\tif(isFloat32Array(Y)){\n\t\ttexels1 = Y;\n\t} else {\n\t\ttexels1 = new Float32Array(N);\n\t\ttexels1.fill(Y);\n\t}\n\n\t// create input textures from data\n\tvar texture0 = gl.createDataTexture(1, N, texels0);\n\tvar texture1 = gl.createDataTexture(1, N, texels1);\n\n\tvar texture3 = gl.createOutputTexture(1, N);\n\n\tsaxpycalculator.calculate(N, a, texture0, texture1, texture3);\n\n\t// retrieve data\n\trawBuffer = gl.readData(1, N);\n\n\t// clean up\n\tgl.context.deleteTexture(texture0);\n\tgl.context.deleteTexture(texture1);\n\tgl.context.deleteTexture(texture3);\n\n\t// return result\n\treturn new Float32Array(rawBuffer);\n\n}\n\nfunction isFloat32Array(obj){\n\treturn Object.prototype.toString.call(obj) === \"[object Float32Array]\";\n}\n/* a more general version of the BLAS Level 1 scale, that works on matrices\n   and includes an elementwise scalar addition\n\n   a * X + b\n\n   a - multiplicative scalar\n   b - additive scalar\n   X - matrix (M x N)\n\n   to get the standard BLAS scal set M = 1 and b = 0\n\n   this function is generally only cost effective to use in a pipeline\n*/\nfunction sscal(M, N, a, b, X){\n\n\tvar rawBuffer;\n\n\tvar texels0 = X;\n\tvar texture0 = gl.createDataTexture(M, N, texels0);\n\n\tvar texture3 = gl.createOutputTexture(M, N);\n\n\tsscalcalculator.calculate(M, N, a, b, texture0, texture3);\n\n\t// retrieve data\n\trawBuffer = gl.readData(M, N);\n\n\t// clean up\n\tgl.context.deleteTexture(texture0);\n\tgl.context.deleteTexture(texture3);\n\n\t// return result\n\treturn new Float32Array(rawBuffer);\n}\n\n/* Calculate the Standard Score normalization (subtract mean\n   ,divide by standard deviation).\n */\nfunction sstd(M, N, mu, sigma, X){\n\n\tvar rawBuffer;\n\n\tvar texels0 = X;\n\tvar texture0 = gl.createDataTexture(M, N, texels0);\n\n\tvar texture3 = gl.createOutputTexture(M, N);\n\n\t// adjust the parameters (for inverse) and call the standard score normalization\n\tsscalcalculator.calculate(M, N, 1.0/sigma, -1.0 * mu/sigma, texture0, texture3);\n\n\t// retrieve data\n\trawBuffer = gl.readData(M, N);\n\n\t// clean up\n\tgl.context.deleteTexture(texture0);\n\tgl.context.deleteTexture(texture3);\n\n\t// return result\n\treturn new Float32Array(rawBuffer);\n}\n\n/* downsample an image (taking the max) for Pooling\n\n\tM - rows in input\n\tN - columns in input\n\tc - channels in input\n\tfactor - the downsample factor (width of patch to sample)\n\tstride - width between pooling regions\n\tX - input image\n */\nfunction sdwns(M, N, channels, factor, stride, X){\n\n\n\tvar texels0 = X;\n\n\tvar texture0 = gl.createDataTexture(M, N * channels, X);\n\n\tvar N_out = Math.floor((N - factor) / stride) + 1;\n\tvar M_out = Math.floor((M - factor) / stride) + 1;\n\n\tvar texture3 = gl.createOutputTexture(M_out, N_out * channels);\n\n\tsdwnscalculator.calculate(M, N, channels, factor, stride, texture0, texture3);\n\n\t// retrieve data\n\trawBuffer = gl.readData(M_out, N_out * channels);\n\n\t// clean up\n\tgl.context.deleteTexture(texture0);\n\tgl.context.deleteTexture(texture3);\n\n\t// return result\n\treturn new Float32Array(rawBuffer);\n}\n/*  Elementwise clamp function for matrices on the interval [a, b]. Can also be\n\tused for min or max, by passing Number.MIN_VALUE for the first parameter and\n\tNumber.MAX_VALUE for the second parameter, respectively.\n\n\tPassing `null` for either of these parameters will default to it's\n\trespective min or max value.\n\n\tM - number of rows in X\n\tN - number of columns in X\n\ta - lower bound (inclusize)\n\tb - upper bound (inclusive)\n\tX - matrix\n\n   to get the standard BLAS scal set M = 1 and b = 0\n\n   this function is generally only cost effective to use in a pipeline\n*/\nfunction sclmp(M, N, a, b, X){\n\n\ta = (a != null) ? a : Number.MIN_VALUE;\n\tb = (b != null) ? b : Number.MAX_VALUE;\n\n\tvar rawBuffer;\n\n\tvar texels0 = X;\n\tvar texture0 = gl.createDataTexture(M, N, texels0);\n\n\tvar texture3 = gl.createOutputTexture(M, N);\n\n\tsclmpcalculator.calculate(M, N, a, b, texture0, texture3);\n\n\t// retrieve data\n\trawBuffer = gl.readData(M, N);\n\n\t// clean up\n\tgl.context.deleteTexture(texture0);\n\tgl.context.deleteTexture(texture3);\n\n\t// return result\n\treturn new Float32Array(rawBuffer);\n}\n/*\nfunction saxpy(n, a, x, y){\n\tvar i = 0,\n\t\tresult = new Float32Array(n);\n\n\t// assert n = x.length\n\t// assert a is scalar\n\t// assert x is Float32Array\n\n\tif(isNumeric(y)){\n\t\t// shortcut for scalar y\n\t\tfor(; i < n; i++){\n\t\t\tresult[i] = a * x[i] + y;\n\t\t}\n\t} else {\n\n\t\tfor(; i < n; i++){\n\t\t\tresult[i] = a * x[i] + y[i];\n\t\t}\n\t}\n\n\treturn result;\n\n}*/\n\n// add a String.format method, if none exists\nif (!String.prototype.format) {\n  String.prototype.format = function() {\n\tvar args = arguments;\n\treturn this.replace(/{(\\d+)}/g, function(match, number) {\n\t  return typeof args[number] != 'undefined'\n\t\t? args[number]\n\t\t: match\n\t  ;\n\t});\n  };\n}\n\nfunction isNumeric( obj ) { return (obj - parseFloat( obj ) + 1) >= 0; }\n\n/* create a typed array from a 2D javascript array */\nfunction fromArray(array, type, tranpose) {\n\tvar shape = [],\n\t\t\tdata,\n\t\t\tc;   // number of columns\n\n\tif(!tranpose){\n\t\tshape[0] = array.length;\n\t\tshape[1] = array[0].length;\n\t} else {\n\t\tshape[1] = array.length;\n\t\tshape[0] = array[0].length;\n\t}\n\tc = shape[1];\n\n\ttype = type || Float32Array;\n\n\tdata = new type(shape[0]*shape[1]);\n\n\tfor (var ii = 0; ii < shape[0]; ++ii)\n\t\tfor (var jj = 0; jj < shape[1]; ++jj)\n\t\tif(!tranpose)\n\t\t\tdata[ii*c + jj] = array[ii][jj];\n\t\telse\n\t\t\tdata[ii*c + jj] = array[jj][ii];\n\n\treturn data;\n};\n\n// tranpose a typed array in row major order, with the given row and column\n// numers\nfunction transpose(r, c, typedArray){\n\tvar result = new typedArray.constructor(r*c);\n\n\tfor(var i = 0; i < r; i++){\n\t\tfor(var j = 0; j < c; j++){\n\t\t\tresult[j * r + i] = typedArray[i * c + j];\n\t\t}\n\t}\n\n\treturn result;\n}\n","var async = require('async'),\n\tloader = require('arrayloader'); // browserify aware file loader (xhr in browser)\n\n/* Collection of helper methods for testing numerical computation\n */\ntest = {};\n\n/* Check all entries in two TypedArrays of identical length for approximate\n\tequality.\n\tIf the following equation is element-wise true, returns true\n\n\tabsolute(a - b) <= (atol + rtol * absolute(b))\n\n\tfrom numpy.allclose\n */\ntest.allclose = function(a, b, RTOL, ATOL){\n\tRTOL= RTOL || 1e-05;  // for 32 bit precision: 1e-06\n\tATOL= ATOL || 1e-08;\n\n\tif(a.length != b.length){\n\t\tconsole.log(\"lengths not equal: \" + a.length + \", \" + b.length);\n\t\treturn {\"result\" : false, \"index\": null};\n\t}\n\n\tvar result;\n\tfor(var i = 0; i < a.length; i++){\n\n\t\tresult = Math.abs(a[i] - b[i]) <= ATOL + RTOL * Math.abs(b[i]);\n\n\t\tif(!result) {\n\t\t\treturn {\"result\": false, \"index\": i};\n\t\t}\n\t}\n\n\treturn {\"result\": true, \"index\": i};\n};\n\ntest.randomArray = function(N, M){\n\n\tvar data = [];\n\n\tfor(var i = 0; i < N; i++){\n\t\tvar row = [];\n\t\tfor(var j = 0; j < M; j++){\n\t\t\trow[j] = Math.random() / Math.sqrt(N);\n\t\t}\n\t\tdata.push(row);\n\t}\n\n\treturn data;\n};\n// pad rows with zeros\ntest.padData = function(M, N, pad, data){\n\n\tvar padded = new Float32Array(M * (N + pad)); // new array of specified length filled with zeros\n\tfor(var i = 0; i < M; i++){\n\t\tpadded.set(data.subarray(i * N, (i + 1) * N), i * (N + pad));\n\t}\n\treturn padded;\n};\n\ntest.submatrix = function(N, M, N_out, offset, data){\n\tvar result = new data.constructor(M * N_out);\n\n\tfor(var i = 0; i < M; i++){\n\t\tfor(var j = 0; j < N_out; j++){\n\t\t\tresult[i * N_out + j] = data[i * N + j + offset];\n\t\t}\n\t}\n\n\treturn result;\n};\n\n\nfunction loadFloat32Array(path, cb){\n\treturn loader.load(path, Float32Array, cb);\n}\n\n/* Load test matrices from JSON data, works in a browser (with XHR)\n\tassumes three files 'a.json', 'b.json' and 'c.json' in nested Array format.\n\n callback = function(err, a, b, c)\n */\ntest.load = function(testDirectory, matrixFiles, callback){\n\n\t// array of paths to matrix data files for current test\n\tvar testFiles = matrixFiles.map(function(item){ return testDirectory + item;});\n\n\t//console.log(testFiles);\n\tasync.map(testFiles, loadFloat32Array,\n\t\tfunction(err, results){\n\n\t\t\tif(err) return callback(err);\n\n\t\t\tcallback(err, results);\n\t\t}\n\t);\n};\n\ntest.assert = {};\n\n/* create a tape compatible assert */\ntest.assert.allclose = function(t, a, b, msg, RTOL, ATOL) {\n\n\tvar ok = test.allclose(a, b, RTOL, ATOL),\n\t\tactual = \"[\",\n\t\texpected = \"[\";\n\n\tif(!ok.result){\n\n\t\tif(ok.index > 1){\n\t\t\tactual += \"..., \";\n\t\t\texpected += \"..., \";\n\t\t}\n\t\tif(ok.index > 0){\n\t\t\tactual += a[ok.index - 1] + \", \";\n\t\t\texpected += b[ok.index - 1] + \", \";\n\t\t}\n\t\tactual += \"-->\";\n\t\texpected += \"-->\";\n\n\t\tfor(var i = ok.index; i < ok.index + 4 && i < a.length; i++ ){\n\t\t\tactual += a[i] + \", \";\n\t\t\texpected += b[i] + \", \";\n\t\t}\n\t\tif(i < a.length){\n\t\t\tactual += \"...]\";\n\t\t\texpected += \"...]\";\n\t\t} else {\n\t\t\tactual += \"]\";\n\t\t\texpected += \"]\";\n\t\t}\n\t\tmsg = msg || 'should be allclose at ' + ok.index;\n\t}\n\n    t._assert(ok.result, {\n        message : msg || 'should be allclose',\n        operator : 'allclose',\n        actual : actual,\n        expected : expected,\n        extra : null\n    });\n}\n\nmodule.exports = test;\n","var globals = require('./globals'),\n\tSGEMMCalculator = require(\"./sgemmcalculator\"),\n\tSAXPYCalculator = require(\"./saxpycalculator\"),\n\tSSCALCalculator = require(\"./sscalcalculator\"),\n\tSDWNSCalculator = require(\"./sdwnscalculator\"),\n\tSCLMPCalculator = require(\"./sclmpcalculator\"),\n\tSLOKNCalculator = require(\"./slokncalculator\"),\n\tTensor = require('./tensor');\n\n\nvar gl = globals.gl,\n\tsgemmcalculator = new SGEMMCalculator(gl, false),\n\tsaxpycalculator = new SAXPYCalculator(gl, false),\n\tsscalcalculator = new SSCALCalculator(gl, false),\n\tsdwnscalculator = new SDWNSCalculator(gl, false),\n\tsclmpcalculator = new SCLMPCalculator(gl, false),\n\tslokncalculator = new SLOKNCalculator(gl, false);\n\nmodule.exports = {\n\t\"Tensor\" : Tensor,\n\t\"sscal\" : sscal,\n\t\"sgemm\" : sgemm,\n\t\"sdwns\" : sdwns,\n\t\"sclmp\" : sclmp,\n\t\"slokn\" : slokn,\n\n\t\"sgemmcalculator\" : sgemmcalculator,\n\t\"saxpycalculator\" : saxpycalculator,\n\t\"sscalcalculator\" : sscalcalculator,\n\t\"sdwnscalculator\" : sdwnscalculator,\n\t\"sclmpcalculator\" : sclmpcalculator,\n\t\"slokncalculator\" : slokncalculator\n}\n\n/* scale (and optionally offset) a Tensor, elementwise\n */\nfunction sscal(a, b, t0){\n\n\tvar M = t0.shape[0],\n\t\tN = t0.shape[1];\n\n\t// create an empty output Tensor\n\tvar tOut = new Tensor([M, N], null);\n\n\tsscalcalculator.calculate(M, N, a, b, t0.texture, tOut.texture);\n\n\treturn tOut;\n}\n\n/* matrix multiply on t0 and t1 with additive t2. t1 must be transposed\n */\nfunction sgemm(alpha, t0, t1, beta, t2){\n\n\tif(t1.shape[1] !== t0.shape[1])\n\t\tthrow new Error(\"Second dimension must be of same size for input Tensors (second Tensor is transposed).\");\n\n\tvar M = t0.shape[0],\n\t\tN = t1.shape[0],\n\t\tK = t0.shape[1];\n\n\tvar texture2;\n\n\tif(t2){\n\t\ttexture2 = t2.texture;\n\t} else {\n\t\ttexture2 = null;\n\t}\n\n\t// create an empty output Tensor\n\tvar tOut = new Tensor([M, N], null);\n\n\tsgemmcalculator.calculate(M, N, K, alpha, t0.texture, t1.texture, beta, texture2, tOut.texture);\n\n\treturn tOut;\n}\n\nfunction sdwns(channels, factor, stride, t0){\n\n\tif(t0.shape[1] % channels !== 0)\n\t\tthrow new Error(\"Second dimension of tensor must be a multiple of channels\");\n\n\tvar M = t0.shape[0],\n\t\tN = t0.shape[1] / channels;\n\n\tvar M_out = Math.floor((M - factor) / stride) + 1;\n\tvar N_out = Math.floor((N - factor) / stride) + 1;\n\n\t// create an empty output Tensor\n\tvar tOut = new Tensor([M_out, N_out * channels], null);\n\n\tsdwnscalculator.calculate(M, N, channels, factor, stride, t0.texture, tOut.texture);\n\n\treturn tOut;\n}\n\nfunction sclmp(a, b, t0){\n\n\ta = (a != null) ? a : Number.MIN_VALUE;\n\tb = (b != null) ? b : Number.MAX_VALUE;\n\n\tvar M = t0.shape[0],\n\t\tN = t0.shape[1];\n\n\t// create an empty output Tensor\n\tvar tOut = new Tensor([M, N], null);\n\n\tsclmpcalculator.calculate(M, N, a, b, t0.texture, tOut.texture);\n\n\treturn tOut;\n}\n\n/* Linearize onto Kernels, Transform input into one row per patch, for use in\n\tconvolution.\n\n\tchannels - number of channels in the input\n\tfactor - width (and height) of kernels (and patches)\n\tstride - number of elements between patches\n\tt0 - the input Tensor\n */\nfunction slokn(channels, factor, stride, margin, t0){\n\n\tif(t0.shape[1] % channels !== 0)\n\t\tthrow new Error(\"Second dimension of tensor must be a multiple of channels\");\n\n\tvar M = t0.shape[0],\n\t\tN = t0.shape[1] / channels;\n\n\tvar N_p, M_p;\n\n\t// number of patches (columns and rows)\n\tif(!margin){\n\t\tmargin = 0;\n\t\tN_p = Math.ceil((N - factor) / stride) + 1;\n\t\tM_p = Math.ceil((M - factor) / stride) + 1;\n\t} else {\n\t\tN_p = Math.ceil((N + (2 * margin) - factor) / stride) + 1;\n\t\tM_p = Math.ceil((M + (2 * margin) - factor) / stride) + 1;\n\t}\n\n\tvar P_p = factor * factor * channels; // elements per kernel\n\tvar M_out = (M_p * N_p),\n\t \tN_out = P_p;\n\n\t// create an empty output Tensor\n\tvar tOut = new Tensor([M_out, N_out], null);\n\n\tslokncalculator.calculate(M, N, channels, M_out, N_out, N_p, factor, stride, margin, t0.texture, tOut.texture);\n\n\treturn tOut;\n}\n","var WebGL = require(\"./webgl\");\n\nvar gl = new WebGL();\n\nmodule.exports = {\n\t\"gl\" : gl\n}\n","var WebGL = require('./webgl');\n\n/* A calculator object for the Float texture based GEMM\n\n\tGeneralized Matrix Multiply (GEMM):\n\n\tC = alpha * A * B + beta * C\n\n\twhere A * B is matrix multiplication\n\n\n\twebgl - a weblas.WebGL object\n\tstandalone - whether or not to automatically run the floating point encode\n\t\tstep for rendering to an UNSIGNED_BYTE texture (this is required for\n\t\tmobile, circa 2015) but can't be used as part of a pipeline.\n\n\t* uploads and downloads data\n\t* executes calculation\n */\nfunction SGEMMCalculator(webgl, standalone){\n\tthis.webgl = webgl,\n\tthis.standalone = (standalone != null) ? standalone : true; // default to standalone mode\n\n\t// read GLSL files\n\tvar s = \"// fragment shader that calculates the matrix product and renders each\\n// element to the bytes representing a 32-bit IEEE754 floating point in\\n// the output RGBA canvas.\\n// readPixel is used to read the bytes.\\n\\nprecision highp float;\\n#define GLSLIFY 1\\n\\nvarying vec2      outTex;\\t// texture coords of row/column to calculate\\nuniform sampler2D A;\\t\\t// texture with data from padded A\\nuniform sampler2D B_t;\\t\\t// texture with data from padded transpose of B\\nuniform int       K;\\t\\t// number of elements in shared dimension\\nuniform int       N;\\t\\t// number of columns in output\\nuniform int       pad;\\t\\t//\\nuniform float     alpha; \\t// coefficient to multiplication\\n\\n// sum of products between elements in row i (from A) x col j (from B)\\n\\n// Calculate the dot product between the row (from A) and column (from B)\\n// identified by the passed indeces (output texture coordinate space).\\n// We loop over elements in the row and column and sum the product\\n// using the glsl `dot` function to process four elements at a time.\\n// This four element optimization requires that the matrix B be\\n// transposed before texel packing and that both matrices be padded\\n// (with zeros) to a multiple of four (4) in their shared dimension.\\nfloat dot_rowcol_1540259130(float y, float x, sampler2D A, sampler2D B_t, int K) {\\n\\tfloat delta_t = 1./float(K);// space (on texture) between elements\\n\\tfloat sum = 0.;\\t\\t\\t// sum for this row/column pair\\n\\tfloat z = 0.5 * (4.0 * delta_t);// position for shared dimension on source textures\\n\\n\\tfor (int l=0 ; l<4096 ; ++l) {\\n\\t\\tif(l >= K / 4) break;    // stop when we finish the row/column\\n\\t\\t// l is in pixel space, so we divide by four\\n\\n\\t\\t// retrieve next four elements from each texture\\n\\t\\tvec4 a_ik = texture2D(  A, vec2(z, y));\\n\\t\\tvec4 b_kj = texture2D(B_t, vec2(z, x));\\n\\n\\t// use `dot` to process four elements at a time\\n\\t\\tsum +=  dot(a_ik, b_kj);\\n\\t\\tz += (4.0 * delta_t);      // (z + 0.5)*delta\\n\\t}\\n\\treturn sum;\\n}\\n\\n// Render float to bytes according to IEEE 754 Floating Point\\nvec4 encode_float_1604150559(float val) {\\n\\n\\t// TODO: correctly handle denormal numbers\\n\\t// http://www.2ality.com/2012/04/number-encoding.html\\n\\tfloat a = abs(val);                           // encode absolute value + sign\\n\\tfloat exp = floor(log2(a));                 // number of powers of 2\\n\\tfloat mant = pow(2.,log2(a)-exp) * pow(2.,23.);  // multiply to fill 24 bits (implied leading 1)\\n\\tfloat mant1 = floor(mant / 256. / 256.);    // first 8 bits of mantissa\\n\\tfloat mant2 = mod(floor(mant / 256.),256.); // second 8 bits\\n\\tfloat mant3 = mod(mant,256.);               // third 8 bits\\n\\n\\thighp float sign = 128.-128.*(a/val);\\t\\t\\t// sign bit is 256 or 0\\n\\thighp float e = (sign+exp+127.)/510.;\\t\\t// exponent and sign\\n\\thighp float m1 = (mant1-(128.*(1.-mod(exp+127.,2.))))/255.; // handle leading bit\\n\\thighp float m2 = (mant2)/255.;\\t\\t\\t\\t// middle part\\n\\thighp float m3 = (mant3+.5)/255.;\\t\\t\\t// scale to 0 - 255\\n\\n\\treturn vec4(m3,m2,m1,e);\\n}\\n\\nvoid main(void) {\\n\\n\\t// get the implied row and column from .y and .x of passed (output)\\n\\t// texture coordinate. These map directly to input texture space when\\n\\t// the relevant dimensions are the same.\\n\\tfloat row_t = outTex.y;\\n\\tfloat col_t = outTex.x;\\n\\n\\t// sum row x col for the passed pixel\\n\\tfloat sum = alpha * dot_rowcol_1540259130(row_t, col_t * float(N + pad)/float(N), A, B_t, K);\\n\\n\\tif (sum == 0.) {\\n\\t\\tgl_FragColor = vec4(0.,0.,0.,0.);\\n\\t\\treturn;\\n\\t}\\n\\n\\t// output vec4 with bytes for an IEEE754 32-bit floating point number\\n\\tgl_FragColor = encode_float_1604150559(sum);\\n}\\n\",\n\t\ts_c = \"// fragment shader that calculates the matrix product (with additive 'C' term)\\n// and renders each element to the bytes representing a 32-bit IEEE754 floating\\n// point in the output RGBA canvas.\\n// readPixel is used to read the bytes.\\n\\nprecision highp float;\\n#define GLSLIFY 1\\n\\nvarying vec2      outTex;\\t// texture coords of row/column to calculate\\nuniform sampler2D A;\\t\\t// texture with data from padded A\\nuniform sampler2D B_t;\\t\\t// texture with data from padded transpose of B\\nuniform sampler2D C;\\t\\t// texture with data from C\\nuniform int       K;\\t\\t// number of elements in shared dimension\\nuniform int       N;\\t\\t// number of columns in output\\nuniform int       pad;\\t\\t//\\nuniform float     alpha; \\t// coefficient to multiplication\\nuniform float     beta; \\t// coefficient to additive term\\n\\n// sum of products between elements in row i (from A) x col j (from B)\\n\\n// Calculate the dot product between the row (from A) and column (from B)\\n// identified by the passed indeces (output texture coordinate space).\\n// We loop over elements in the row and column and sum the product\\n// using the glsl `dot` function to process four elements at a time.\\n// This four element optimization requires that the matrix B be\\n// transposed before texel packing and that both matrices be padded\\n// (with zeros) to a multiple of four (4) in their shared dimension.\\nfloat dot_rowcol_1540259130(float y, float x, sampler2D A, sampler2D B_t, int K) {\\n\\tfloat delta_t = 1./float(K);// space (on texture) between elements\\n\\tfloat sum = 0.;\\t\\t\\t// sum for this row/column pair\\n\\tfloat z = 0.5 * (4.0 * delta_t);// position for shared dimension on source textures\\n\\n\\tfor (int l=0 ; l<4096 ; ++l) {\\n\\t\\tif(l >= K / 4) break;    // stop when we finish the row/column\\n\\t\\t// l is in pixel space, so we divide by four\\n\\n\\t\\t// retrieve next four elements from each texture\\n\\t\\tvec4 a_ik = texture2D(  A, vec2(z, y));\\n\\t\\tvec4 b_kj = texture2D(B_t, vec2(z, x));\\n\\n\\t// use `dot` to process four elements at a time\\n\\t\\tsum +=  dot(a_ik, b_kj);\\n\\t\\tz += (4.0 * delta_t);      // (z + 0.5)*delta\\n\\t}\\n\\treturn sum;\\n}\\n\\n// Render float to bytes according to IEEE 754 Floating Point\\nvec4 encode_float_1604150559(float val) {\\n\\n\\t// TODO: correctly handle denormal numbers\\n\\t// http://www.2ality.com/2012/04/number-encoding.html\\n\\tfloat a = abs(val);                           // encode absolute value + sign\\n\\tfloat exp = floor(log2(a));                 // number of powers of 2\\n\\tfloat mant = pow(2.,log2(a)-exp) * pow(2.,23.);  // multiply to fill 24 bits (implied leading 1)\\n\\tfloat mant1 = floor(mant / 256. / 256.);    // first 8 bits of mantissa\\n\\tfloat mant2 = mod(floor(mant / 256.),256.); // second 8 bits\\n\\tfloat mant3 = mod(mant,256.);               // third 8 bits\\n\\n\\thighp float sign = 128.-128.*(a/val);\\t\\t\\t// sign bit is 256 or 0\\n\\thighp float e = (sign+exp+127.)/510.;\\t\\t// exponent and sign\\n\\thighp float m1 = (mant1-(128.*(1.-mod(exp+127.,2.))))/255.; // handle leading bit\\n\\thighp float m2 = (mant2)/255.;\\t\\t\\t\\t// middle part\\n\\thighp float m3 = (mant3+.5)/255.;\\t\\t\\t// scale to 0 - 255\\n\\n\\treturn vec4(m3,m2,m1,e);\\n}\\n\\n// select an element from a vector based on index\\nfloat select_index_1117569599(vec4 v, int index){\\n\\tfloat val;\\n\\tif (index == 0) {\\n\\t\\tval = v.r;\\n\\t} else if(index == 1) {\\n\\t\\tval = v.g;\\n\\t} else if(index == 2) {\\n\\t\\tval = v.b;\\n\\t} else if(index == 3){\\n\\t\\tval = v.a;\\n\\t} else {\\n\\t\\t// should never be here\\n\\t\\tval = 0.0;\\n\\t}\\n\\n\\treturn val;\\n}\\n\\nvoid main(void) {\\n\\n\\t// get the implied row and column from .y and .x of passed (output)\\n\\t// texture coordinate. These map directly to input texture space when\\n\\t// the relevant dimensions are the same.\\n\\tfloat row_t = outTex.y;\\n\\tfloat col_t = outTex.x;\\n\\tvec4 c_vec = texture2D(C, vec2(col_t, 0.5));\\n\\n\\t// should be -0.5, but that subtly breaks at zero\\n\\tfloat col = col_t * float(N + pad); // index of first element in pixel (matrix space)\\n\\tint channel = int(mod(col, 4.0 ));\\n\\tfloat c = select_index_1117569599(c_vec, channel);\\n\\n\\t// sum row x col for the passed pixel\\n\\tfloat sum = alpha * dot_rowcol_1540259130(row_t, col_t * float(N + pad)/float(N), A, B_t, K);\\n\\tsum += beta * c;\\n\\n\\tif (sum == 0.) {\\n\\t\\tgl_FragColor = vec4(0.,0.,0.,0.);\\n\\t\\treturn;\\n\\t}\\n\\n\\t// output vec4 with bytes for an IEEE754 32-bit floating point number\\n\\tgl_FragColor = encode_float_1604150559(sum);\\n}\\n\",\n\t\tp = \"// fragment shader that calculates the matrix product and writes each\\n// element to a pixel component in a floating point texture.\\n// the output RGBA canvas.\\n// readPixel is used to read the bytes.\\n\\nprecision highp float;\\n#define GLSLIFY 1\\n\\nvarying vec2      outTex;\\t// texture coords of row/column to calculate\\nuniform sampler2D A;\\t\\t// texture with data from padded A\\nuniform sampler2D B_t;\\t\\t// texture with data from padded transpose of B\\nuniform int       K;\\t\\t// number of elements in shared dimension\\nuniform int       N;\\t\\t// number of columns in output\\nuniform int       pad;\\t\\t//\\nuniform float     alpha; \\t// coefficient to multiplication\\n\\n// sum of products between elements in row i (from A) x col j (from B)\\n\\n// Calculate the dot product between the row (from A) and column (from B)\\n// identified by the passed indeces (output texture coordinate space).\\n// We loop over elements in the row and column and sum the product\\n// using the glsl `dot` function to process four elements at a time.\\n// This four element optimization requires that the matrix B be\\n// transposed before texel packing and that both matrices be padded\\n// (with zeros) to a multiple of four (4) in their shared dimension.\\nfloat dot_rowcol_1540259130(float y, float x, sampler2D A, sampler2D B_t, int K) {\\n\\tfloat delta_t = 1./float(K);// space (on texture) between elements\\n\\tfloat sum = 0.;\\t\\t\\t// sum for this row/column pair\\n\\tfloat z = 0.5 * (4.0 * delta_t);// position for shared dimension on source textures\\n\\n\\tfor (int l=0 ; l<4096 ; ++l) {\\n\\t\\tif(l >= K / 4) break;    // stop when we finish the row/column\\n\\t\\t// l is in pixel space, so we divide by four\\n\\n\\t\\t// retrieve next four elements from each texture\\n\\t\\tvec4 a_ik = texture2D(  A, vec2(z, y));\\n\\t\\tvec4 b_kj = texture2D(B_t, vec2(z, x));\\n\\n\\t// use `dot` to process four elements at a time\\n\\t\\tsum +=  dot(a_ik, b_kj);\\n\\t\\tz += (4.0 * delta_t);      // (z + 0.5)*delta\\n\\t}\\n\\treturn sum;\\n}\\n\\nvoid main(void) {\\n\\n\\t// get the implied row and column from .y and .x of passed (output)\\n\\t// texture coordinate. These map directly to input texture space when\\n\\t// the relevant dimensions are the same.\\n\\tfloat row_t = outTex.y;\\n\\tfloat col_t = outTex.x;\\n\\n\\tvec4 sum_v = vec4(0.0, 0.0, 0.0, 0.0);\\n\\tfloat col = (col_t * float(N + pad) - 2.0); // index of first element in pixel (matrix space)\\n\\tsum_v.r = alpha * dot_rowcol_1540259130(row_t, (col + 0.5)/float(N), A, B_t, K);\\n\\t// is last element in pixel past row length?\\n\\tif(pad > 0 && (col + 4.0) > float(N) ) {\\n\\t\\t// compute elements in padded region\\n\\t\\tif(pad < 3){\\n\\t\\t\\tsum_v.g = alpha * dot_rowcol_1540259130(row_t, (col + 1.5)/float(N), A, B_t, K);\\n\\t\\t}\\n\\t\\tif(pad < 2){\\n\\t\\t\\tsum_v.b = alpha * dot_rowcol_1540259130(row_t, (col + 2.5)/float(N), A, B_t, K);\\n\\t\\t}\\n\\t} else {\\n\\t\\tsum_v.g = alpha * dot_rowcol_1540259130(row_t, (col + 1.5)/float(N), A, B_t, K);\\n\\t\\tsum_v.b = alpha * dot_rowcol_1540259130(row_t, (col + 2.5)/float(N), A, B_t, K);\\n\\t\\tsum_v.a = alpha * dot_rowcol_1540259130(row_t, (col + 3.5)/float(N), A, B_t, K);\\n\\t}\\n\\n\\tgl_FragColor = sum_v;\\n}\\n\",\n\t\tp_c = \"// fragment shader that calculates the matrix product and writes each\\n// element to a pixel component in a floating point texture.\\n// the output RGBA canvas.\\n// readPixel is used to read the bytes.\\n\\nprecision highp float;\\n#define GLSLIFY 1\\n\\nvarying vec2      outTex;\\t// texture coords of row/column to calculate\\nuniform sampler2D A;\\t\\t// texture with data from padded A\\nuniform sampler2D B_t;\\t\\t// texture with data from padded transpose of B\\nuniform sampler2D C;\\t\\t// texture with data from C\\nuniform int       K;\\t\\t// number of elements in shared dimension\\nuniform int       N;\\t\\t// number of columns in output\\nuniform int       pad;\\t\\t//\\nuniform float     alpha; \\t// coefficient to multiplication\\nuniform float     beta; \\t// coefficient to addition\\n\\n// sum of products between elements in row i (from A) x col j (from B)\\n\\n// Calculate the dot product between the row (from A) and column (from B)\\n// identified by the passed indeces (output texture coordinate space).\\n// We loop over elements in the row and column and sum the product\\n// using the glsl `dot` function to process four elements at a time.\\n// This four element optimization requires that the matrix B be\\n// transposed before texel packing and that both matrices be padded\\n// (with zeros) to a multiple of four (4) in their shared dimension.\\nfloat dot_rowcol_1540259130(float y, float x, sampler2D A, sampler2D B_t, int K) {\\n\\tfloat delta_t = 1./float(K);// space (on texture) between elements\\n\\tfloat sum = 0.;\\t\\t\\t// sum for this row/column pair\\n\\tfloat z = 0.5 * (4.0 * delta_t);// position for shared dimension on source textures\\n\\n\\tfor (int l=0 ; l<4096 ; ++l) {\\n\\t\\tif(l >= K / 4) break;    // stop when we finish the row/column\\n\\t\\t// l is in pixel space, so we divide by four\\n\\n\\t\\t// retrieve next four elements from each texture\\n\\t\\tvec4 a_ik = texture2D(  A, vec2(z, y));\\n\\t\\tvec4 b_kj = texture2D(B_t, vec2(z, x));\\n\\n\\t// use `dot` to process four elements at a time\\n\\t\\tsum +=  dot(a_ik, b_kj);\\n\\t\\tz += (4.0 * delta_t);      // (z + 0.5)*delta\\n\\t}\\n\\treturn sum;\\n}\\n\\nvoid main(void) {\\n\\n\\t// get the implied row and column from .y and .x of passed (output)\\n\\t// texture coordinate. These map directly to input texture space when\\n\\t// the relevant dimensions are the same.\\n\\tfloat row_t = outTex.y;\\n\\tfloat col_t = outTex.x;\\n\\tvec4 c_v = texture2D(C, vec2(col_t, 0.5));\\n\\n\\tvec4 sum_v = vec4(0.0, 0.0, 0.0, 0.0);\\n\\tfloat col = (col_t * float(N + pad) - 2.0); // index of first element in pixel (matrix space)\\n\\tsum_v.r = alpha * dot_rowcol_1540259130(row_t, (col + 0.5)/float(N), A, B_t, K);\\n\\t// in the padding region?\\n\\tif(pad > 0 && (col + 4.0) > float(N) ) {\\n\\t\\t// pad\\n\\t\\tif(pad < 3){\\n\\t\\t\\tsum_v.g = alpha * dot_rowcol_1540259130(row_t, (col + 1.5)/float(N), A, B_t, K);\\n\\t\\t}\\n\\t\\tif(pad < 2){\\n\\t\\t\\tsum_v.b = alpha * dot_rowcol_1540259130(row_t, (col + 2.5)/float(N), A, B_t, K);\\n\\t\\t}\\n\\t} else {\\n\\t\\tsum_v.g = alpha * dot_rowcol_1540259130(row_t, (col + 1.5)/float(N), A, B_t, K);\\n\\t\\tsum_v.b = alpha * dot_rowcol_1540259130(row_t, (col + 2.5)/float(N), A, B_t, K);\\n\\t\\tsum_v.a = alpha * dot_rowcol_1540259130(row_t, (col + 3.5)/float(N), A, B_t, K);\\n\\t}\\n\\n\\tgl_FragColor = sum_v + beta*c_v;\\n}\\n\";\n\n\t// create the webgl shader program for this calculation\n\t// based on the specific fragment shader for this calculation\n\t// and the generic pass through shader\n\tif(this.standalone){\n\t\tthis.program_ = this.webgl.createProgram(s);\n\t\tthis.program_c = this.webgl.createProgram(s_c);\n\t} else {\n\t\tthis.program_ = this.webgl.createProgram(p);\n\t\tthis.program_c = this.webgl.createProgram(p_c);\n\t}\n\n}\n\nmodule.exports = SGEMMCalculator;\n\n/* Names of the uniforms (variables) used in the shader program passed in on\n   each calculation.\n */\nSGEMMCalculator.TEXTURE_UNIFORM_NAME_0 = \"A\";\nSGEMMCalculator.TEXTURE_UNIFORM_NAME_1 = \"B_t\";\nSGEMMCalculator.TEXTURE_UNIFORM_NAME_2 = \"C\";\nSGEMMCalculator.SHARED_LENGTH_UNIFORM_NAME = \"K\";\nSGEMMCalculator.COLUMN_COUNT_UNIFORM_NAME = \"N\";\nSGEMMCalculator.PAD_UNIFORM_NAME = \"pad\";\nSGEMMCalculator.ALPHA_UNIFORM_NAME = \"alpha\";\nSGEMMCalculator.BETA_UNIFORM_NAME = \"beta\";\n\n/* Calculate the GEMM, with the given data.\n\n\tM - number of rows in A\n\tN - number of columns in B\n\tK - number of elements in shared dimension (including padding)\n\talpha - scalar for A\n\tA - left hand matrix (as padded texture)\n\tB - transpose of right hand matrix (as padded texture)\n\tbeta - scalar for C\n\tC - additive matrix (texture)\n\tout - output (texture)\n\n  How this works:\n\n  1. Activate our shader program\n  2. Bind input textures\n  3. Set shader program parameters\n  4. Bind output texture\n  5. Activate calculation with `drawElements`\n\n TODO: signature should look like this:\n ( TRANSA, TRANSB, M, N, K, ALPHA, A, LDA, B, LDB, BETA, C, LDC )\n http://www.math.utah.edu/software/lapack/lapack-blas/dgemm.html\n */\nSGEMMCalculator.prototype.calculate = function(M, N, K, alpha, A, B, beta, C, out){\n\n\tvar gl = this.webgl.context;\n\n\t/*\n\tvar h1 = M, w1 = K,\n\t\th2 = K, w2 = N;\n\t*/\n\n\t// set this calculator program as the active program\n\tif(C != null){\n\t\tthis.program = this.program_c;\n\t} else {\n\t\tbeta = null;\n\t\tthis.program = this.program_;\n\t\t//console.log(\"no C\");\n\t}\n\tthis.webgl.selectProgram(this.program);\n\n\t//  bind our input textures containing matrix data\n\tthis.bindInputTexture(A, gl.TEXTURE0, SGEMMCalculator.TEXTURE_UNIFORM_NAME_0);\n\tthis.bindInputTexture(B, gl.TEXTURE1, SGEMMCalculator.TEXTURE_UNIFORM_NAME_1);\n\tif(C != null){\n\t\tthis.bindInputTexture(C, gl.TEXTURE2, SGEMMCalculator.TEXTURE_UNIFORM_NAME_2);\n\t}\n\n\tvar kPad = this.webgl.getPad(K),\n\t\tnPad = this.webgl.getPad(N);\n\n\t// set the data specific variables in our shader program\n\tthis.bindUniforms(N, K + kPad, nPad, alpha, beta);\n\n\t// create our destination texture\n\tif(this.standalone){\n\t\tthis.webgl.bindOutputTexture(M, N + nPad, out);\n\t} else {\n\t\tthis.webgl.bindOutputTexture(M, (N + nPad)/ 4, out);\n\t}\n\n\t// initiate calculation\n\tgl.drawElements(gl.TRIANGLES, /*num items*/6, gl.UNSIGNED_SHORT, 0);\n\n\tthis.webgl.unbindInputTexture(gl.TEXTURE0);\n\tthis.webgl.unbindInputTexture(gl.TEXTURE1);\n\tthis.webgl.unbindInputTexture(gl.TEXTURE2);\n\n\t// result can now be read with gl.readResult, or more operations can be\n\t// performed on destination texture (in pipeline mode)\n};\n\n\n/* Create a texture from the given texel data and bind it to our shader program.\n\n\th - number of rows in input matrix\n\tw - number of cols in input matrix\n\ttexels - packed data\n\ttextureUnit - the texture unit to bind to (gl.TEXTURE0, gl.TEXTURE1, etc)\n\tname - the uniform name to associate with (must match shader program)\n\n\tmust compile program (with createProgram) first\n*/\nSGEMMCalculator.prototype.bindInputTexture = function(texture, textureUnit, name){\n\tvar gl = this.webgl.context,\n\t\tprogram = this.program;\n\n\tgl.activeTexture(textureUnit); // gl.TEXTURE0, gl.TEXTURE1, etc\n\tgl.bindTexture(\t  gl.TEXTURE_2D, texture);\n\n\tvar sampler = gl.getUniformLocation(program, name);\n\tgl.uniform1i(sampler, textureUnit - gl.TEXTURE0);\n\n};\n\n\n/* Set up inputs for the texture shader\n\n\tK - size of shared dimension for multiplied matrices\n */\nSGEMMCalculator.prototype.bindUniforms = function(N, K, pad, alpha, beta) {\n\tvar gl = this.webgl.context;\n\n\t// get var locations\n\tvar K_gl\t = gl.getUniformLocation(this.program, SGEMMCalculator.SHARED_LENGTH_UNIFORM_NAME),\n\t\talpha_gl = gl.getUniformLocation(this.program, SGEMMCalculator.ALPHA_UNIFORM_NAME),\n\t\tbeta_gl = gl.getUniformLocation(this.program, SGEMMCalculator.BETA_UNIFORM_NAME),\n\t\tN_gl = gl.getUniformLocation(this.program, SGEMMCalculator.COLUMN_COUNT_UNIFORM_NAME),\n\t\tpad_gl = pad_gl = gl.getUniformLocation(this.program, SGEMMCalculator.PAD_UNIFORM_NAME);\n\n\tgl.uniform1f(beta_gl, beta);\n\tgl.uniform1i(N_gl, N);\n\tgl.uniform1i(pad_gl, pad);\n\n\t// bind length of shared dimension\n\tgl.uniform1i(K_gl, K);\n\t// bind alpha\n\tgl.uniform1f(alpha_gl, alpha);\n\n};\n","var WebGL = require('./webgl');\n\n/* A calculator object for the Float texture based AXPY\n\n\ta times X plus Y (AXPY):\n\n\tY = a * X + Y\n\n\twhere X + Y is elementwise matrix addition\n\n\n\twebgl - a weblas.WebGL object\n\tstandalone - whether or not to automatically run the floating point encode\n\t\tstep for rendering to an UNSIGNED_BYTE texture (this is required for\n\t\tmobile, circa 2015) but can't be used as part of a pipeline.\n\n\t* uploads and downloads data\n\t* executes calculation\n */\nfunction SAXPYCalculator(webgl, standalone){\n\tthis.webgl = webgl,\n\tthis.standalone = standalone || true; // default to standalone mode\n\n\n\tvar s = \"precision highp float;\\n#define GLSLIFY 1\\n\\nvarying vec2      outTex;\\t// texture coords of row/column to calculate\\nuniform sampler2D X;\\t\\t// texture with data from padded A\\nuniform sampler2D Y;\\t\\t// texture with data from padded transpose of B\\nuniform int       N;\\nuniform float     a; \\t\\t// coefficient to multiplication\\n\\n// Render float to bytes according to IEEE 754 Floating Point\\nvec4 encode_float_1540259130(float val) {\\n\\n\\t// TODO: correctly handle denormal numbers\\n\\t// http://www.2ality.com/2012/04/number-encoding.html\\n\\tfloat a = abs(val);                           // encode absolute value + sign\\n\\tfloat exp = floor(log2(a));                 // number of powers of 2\\n\\tfloat mant = pow(2.,log2(a)-exp) * pow(2.,23.);  // multiply to fill 24 bits (implied leading 1)\\n\\tfloat mant1 = floor(mant / 256. / 256.);    // first 8 bits of mantissa\\n\\tfloat mant2 = mod(floor(mant / 256.),256.); // second 8 bits\\n\\tfloat mant3 = mod(mant,256.);               // third 8 bits\\n\\n\\thighp float sign = 128.-128.*(a/val);\\t\\t\\t// sign bit is 256 or 0\\n\\thighp float e = (sign+exp+127.)/510.;\\t\\t// exponent and sign\\n\\thighp float m1 = (mant1-(128.*(1.-mod(exp+127.,2.))))/255.; // handle leading bit\\n\\thighp float m2 = (mant2)/255.;\\t\\t\\t\\t// middle part\\n\\thighp float m3 = (mant3+.5)/255.;\\t\\t\\t// scale to 0 - 255\\n\\n\\treturn vec4(m3,m2,m1,e);\\n}\\n\\n// select an element from a vector based on index\\nfloat select_index_1604150559(vec4 v, int index){\\n\\tfloat val;\\n\\tif (index == 0) {\\n\\t\\tval = v.r;\\n\\t} else if(index == 1) {\\n\\t\\tval = v.g;\\n\\t} else if(index == 2) {\\n\\t\\tval = v.b;\\n\\t} else if(index == 3){\\n\\t\\tval = v.a;\\n\\t} else {\\n\\t\\t// should never be here\\n\\t\\tval = 0.0;\\n\\t}\\n\\n\\treturn val;\\n}\\n\\nvoid main(void) {\\n\\n\\t// get the implied row and column from .y and .x of passed (output)\\n\\t// texture coordinate. These map directly to input texture space when\\n\\t// the relevant dimensions are the same.\\n \\tfloat row = outTex.y;\\n\\tfloat col = outTex.x;\\n\\n\\t// direct usage of col requires output be padded exactly like input\\n\\tvec4 x = texture2D( X, vec2(col, row));\\n\\tvec4 y = texture2D( Y, vec2(col, row));\\n\\tvec4 sum_v = (a * x) + y;\\n\\tint channel = int(mod(col * float(N), 4.0 ));\\n\\tfloat sum = select_index_1604150559(sum_v, channel);\\n\\n\\tif (sum == 0.) {\\n\\t\\tgl_FragColor = vec4(0.,0.,0.,0.);\\n\\t\\treturn;\\n\\t}\\n\\n \\t// output vec4 with bytes for an IEEE754 32-bit floating point number\\n\\tgl_FragColor = encode_float_1540259130(sum);\\n}\\n\";\n\t//\tp = glslify('./glsl/saxpy/pipeline.glsl');\n\n\t// create the webgl shader program for this calculation\n\t// based on the specific fragment shader for this calculation\n\t// and the generic pass through shader\n\tif(this.standalone){\n\t\tthis.program = this.webgl.createProgram(s);\n\t} else {\n\t\tthis.program = this.webgl.createProgram(p);\n\t}\n}\n\nmodule.exports = SAXPYCalculator;\n\n/* Names of the uniforms (variables) used in the shader program passed in on\n   each calculation.\n */\nSAXPYCalculator.TEXTURE_UNIFORM_NAME_0 = \"X\";\nSAXPYCalculator.TEXTURE_UNIFORM_NAME_1 = \"Y\";\nSAXPYCalculator.LENGTH_UNIFORM_NAME = \"N\";\nSAXPYCalculator.COEFFICIENT_UNIFORM_NAME = \"a\";\n\n\n/* Calculate the AXPY, with the given data.\n\n\tN - number of elements in X and Y\n\ta - scalar coefficient to X\n\tX - left hand vector (texture)\n\tY - right hand vector (texture)\n\tout - output (texture)\n\n  How this works:\n\n  1. Activate our shader program\n  2. Bind input textures\n  3. Set shader program parameters\n  4. Bind output texture\n  5. Activate calculation with `drawElements`\n\n */\nSAXPYCalculator.prototype.calculate = function(N, a, X, Y, out){\n\n\tvar gl = this.webgl.context;\n\n\t/*\n\tvar h1 = M, w1 = K,\n\t\th2 = K, w2 = N;\n\t*/\n\n\tthis.webgl.selectProgram(this.program);\n\n\t// create and bind our input texture using matrix data\n\tthis.bindInputTexture(X, gl.TEXTURE0, SAXPYCalculator.TEXTURE_UNIFORM_NAME_0);\n\tthis.bindInputTexture(Y, gl.TEXTURE1, SAXPYCalculator.TEXTURE_UNIFORM_NAME_1);\n\n\n\tvar pad = this.webgl.getPad(N);\n\t// set the data specific variables in our shader program\n\tthis.bindUniforms(N + pad, a);\n\n\t// create our destination texture\n\tthis.webgl.bindOutputTexture(1, N + pad, out);\n\n\n\t// initiate calculation\n\tgl.drawElements(gl.TRIANGLES, /*num items*/6, gl.UNSIGNED_SHORT, 0);\n\n\tthis.webgl.unbindInputTexture(gl.TEXTURE0);\n\tthis.webgl.unbindInputTexture(gl.TEXTURE1);\n\n};\n\n/* Create a texture from the given texel data and bind it to our shader program.\n\n\th - number of rows in input matrix\n\tw - number of cols in input matrix\n\ttexels - packed data\n\ttextureUnit - the texture unit to bind to (gl.TEXTURE0, gl.TEXTURE1, etc)\n\tname - the uniform name to associate with (must match shader program)\n\n\tmust compile program (with createProgram) first\n*/\nSAXPYCalculator.prototype.bindInputTexture = function(texture, textureUnit, name){\n\tvar gl = this.webgl.context,\n\t\tprogram = this.program;\n\n\tgl.activeTexture(textureUnit); // gl.TEXTURE0, gl.TEXTURE1, etc\n\tgl.bindTexture(\t  gl.TEXTURE_2D, texture);\n\n\tvar sampler = gl.getUniformLocation(program, name);\n\tgl.uniform1i(sampler, textureUnit - gl.TEXTURE0);\n\n};\n\n/* Set up inputs for the texture shader\n\n */\nSAXPYCalculator.prototype.bindUniforms = function(N, a) {\n\tvar gl = this.webgl.context;\n\n\t// get var locations\n\tvar N_gl = gl.getUniformLocation(this.program, SAXPYCalculator.LENGTH_UNIFORM_NAME),\n\t\ta_gl = gl.getUniformLocation(this.program, SAXPYCalculator.COEFFICIENT_UNIFORM_NAME);\n\n\t// bind length of shared dimension\n\tgl.uniform1i(N_gl, N);\n\tgl.uniform1f(a_gl, a);\n\n};\n","var WebGL = require('./webgl');\n\n/*  Elementwise clamp function for matrices on the interval [a, b]. Can also be\n\tused for min or max, by passing Number.MIN_VALUE for the first parameter and\n\tNumber.MAX_VALUE for the second parameter, respectively.\n\n\tPassing `null` for either of these parameters will default to it's\n\trespective min or max value.\n\n\tmax(a, min(b, x)) for each x in X\n\n\twhere X is a matrix, a and b are scalars\n\n\n\twebgl - a weblas.WebGL object\n\tstandalone - whether or not to automatically run the floating point encode\n\t\tstep for rendering to an UNSIGNED_BYTE texture (this is required for\n\t\tmobile, circa 2015) but can't be used as part of a pipeline.\n\n\t* uploads and downloads data\n\t* executes calculation\n */\nfunction SCLMPCalculator(webgl, standalone){\n\tthis.webgl = webgl,\n\tthis.standalone = (standalone != null) ? standalone : true; // default to standalone mode\n\n\tvar s = \"precision highp float;\\n#define GLSLIFY 1\\n\\nvarying vec2      outTex;\\t// texture coords of row/column to calculate\\nuniform sampler2D X;\\t\\t// texture with data from padded A\\nuniform int       N;\\t\\t// number of columns\\nuniform int       pad;\\t\\t// additional columns to nearest multiple of four\\nuniform float     a; \\t\\t// lower bound\\nuniform float     b; \\t\\t// upper bound\\n\\n// Render float to bytes according to IEEE 754 Floating Point\\nvec4 encode_float_1540259130(float val) {\\n\\n\\t// TODO: correctly handle denormal numbers\\n\\t// http://www.2ality.com/2012/04/number-encoding.html\\n\\tfloat a = abs(val);                           // encode absolute value + sign\\n\\tfloat exp = floor(log2(a));                 // number of powers of 2\\n\\tfloat mant = pow(2.,log2(a)-exp) * pow(2.,23.);  // multiply to fill 24 bits (implied leading 1)\\n\\tfloat mant1 = floor(mant / 256. / 256.);    // first 8 bits of mantissa\\n\\tfloat mant2 = mod(floor(mant / 256.),256.); // second 8 bits\\n\\tfloat mant3 = mod(mant,256.);               // third 8 bits\\n\\n\\thighp float sign = 128.-128.*(a/val);\\t\\t\\t// sign bit is 256 or 0\\n\\thighp float e = (sign+exp+127.)/510.;\\t\\t// exponent and sign\\n\\thighp float m1 = (mant1-(128.*(1.-mod(exp+127.,2.))))/255.; // handle leading bit\\n\\thighp float m2 = (mant2)/255.;\\t\\t\\t\\t// middle part\\n\\thighp float m3 = (mant3+.5)/255.;\\t\\t\\t// scale to 0 - 255\\n\\n\\treturn vec4(m3,m2,m1,e);\\n}\\n\\n// select an element from a vector based on index\\nfloat select_index_1604150559(vec4 v, int index){\\n\\tfloat val;\\n\\tif (index == 0) {\\n\\t\\tval = v.r;\\n\\t} else if(index == 1) {\\n\\t\\tval = v.g;\\n\\t} else if(index == 2) {\\n\\t\\tval = v.b;\\n\\t} else if(index == 3){\\n\\t\\tval = v.a;\\n\\t} else {\\n\\t\\t// should never be here\\n\\t\\tval = 0.0;\\n\\t}\\n\\n\\treturn val;\\n}\\n\\nvoid main(void) {\\n\\n\\t// get the implied row and column from .y and .x of passed (output)\\n\\t// texture coordinate. These map directly to input texture space when\\n\\t// the relevant dimensions are the same.\\n\\tfloat row = outTex.y;\\n\\tfloat col = outTex.x;\\n\\n\\t// return 0.0 if in padded region of output texture\\n\\tif(col * float(N + pad) > float(N) ) {\\n\\t\\tgl_FragColor = vec4(0.,0.,0.,0.);\\n\\t\\treturn;\\n\\t}\\n\\n\\t// direct usage of col requires output be padded exactly like input\\n\\tvec4 x = texture2D( X, vec2(col, row));\\n\\tvec4 val = clamp(x, a, b);\\n\\n\\t// select and output channel (standalone version only)\\n\\tint channel = int(mod(col * float(N + pad), 4.0));\\n\\tfloat sum = select_index_1604150559(val, channel);\\n\\n\\tif (sum == 0.) {\\n\\t\\tgl_FragColor = vec4(0.,0.,0.,0.);\\n\\t\\treturn;\\n\\t}\\n\\n\\t// output vec4 with bytes for an IEEE754 32-bit floating point number\\n\\tgl_FragColor = encode_float_1540259130(sum);\\n}\\n\",\n\t\tp = \"precision highp float;\\n#define GLSLIFY 1\\n\\nvarying vec2      outTex;\\t// texture coords of row/column to calculate\\nuniform sampler2D X;\\t\\t// texture with data from padded A\\nuniform int       N;\\t\\t// number of columns\\nuniform int       pad;\\t\\t// additional columns to nearest multiple of four\\nuniform float     a; \\t\\t// lower bound\\nuniform float     b; \\t\\t// upper bound\\n\\n// set pad values to 0.0, if in padded region of output texture\\nvoid fix_pad_1540259130(inout vec4 v, int pad){\\n\\tv.a = 0.0;\\n\\tif(pad == 2){\\n\\t\\tv.b = 0.0;\\n\\t} else if(pad == 3){\\n\\t\\tv.b = 0.0;\\n\\t\\tv.g = 0.0;\\n\\t}\\n}\\n\\nvoid main(void) {\\n\\n\\t// get the implied row and column from .y and .x of passed (output)\\n\\t// texture coordinate. These map directly to input texture space when\\n\\t// the relevant dimensions are the same.\\n\\tfloat row_t = outTex.y;\\n\\tfloat col_t = outTex.x;\\n\\tfloat col = (col_t * float(N + pad) - 2.0); // index of first element in pixel (matrix space)\\n\\n\\t// direct usage of col requires output be padded exactly like input\\n\\tvec4 x = texture2D( X, vec2(col_t, row_t));\\n\\tvec4 val_v = clamp(x, a, b);\\n\\n\\t// is last element in pixel past row length?\\n\\tif(pad > 0 && (col + 4.0) > float(N) ) {\\n\\t\\t// fix elements in padded region\\n\\t\\tfix_pad_1540259130(val_v, pad);\\n\\t}\\n\\n\\tgl_FragColor = val_v;\\n}\\n\";\n\n\t// create the webgl shader program for this calculation\n\t// based on the specific fragment shader for this calculation\n\t// and the generic pass through shader\n\tif(this.standalone){\n\t\tthis.program = this.webgl.createProgram(s);\n\t} else {\n\t\tthis.program = this.webgl.createProgram(p);\n\t}\n}\n\nmodule.exports = SCLMPCalculator;\n\n/* Names of the uniforms (variables) used in the shader program passed in on\n   each calculation.\n */\nSCLMPCalculator.TEXTURE_UNIFORM_NAME_0 = \"X\";\nSCLMPCalculator.LENGTH_UNIFORM_NAME = \"N\";\nSCLMPCalculator.LOWER_UNIFORM_NAME = \"a\";\nSCLMPCalculator.UPPER_UNIFORM_NAME = \"b\";\n\n\n/* Elementwise clamp a matrix to the interval [a, b]\n\n\tM - number of rows in X\n\tN - number of columns in X\n\ta - lower bound (inclusize)\n\tb - upper bound (inclusive)\n\tX - matrix (texture)\n\tout - output (texture)\n\n  How this works:\n\n  1. Activate our shader program\n  2. Bind input textures\n  3. Set shader program parameters\n  4. Bind output texture\n  5. Activate calculation with `drawElements`\n\n */\nSCLMPCalculator.prototype.calculate = function(M, N, a, b, X, out){\n\n\ta = (a != null) ? a : Number.MIN_VALUE;\n\tb = (b != null) ? b : Number.MAX_VALUE;\n\n\tvar gl = this.webgl.context;\n\n\tthis.webgl.selectProgram(this.program);\n\n\t// create and bind our input texture using matrix data\n\tthis.bindInputTexture(X, gl.TEXTURE0, SCLMPCalculator.TEXTURE_UNIFORM_NAME_0);\n\n\tvar nPad = this.webgl.getPad(N);\n\t// set the data specific variables in our shader program\n\tthis.bindUniforms(N, nPad, a, b);\n\n\t// create our destination texture\n\tif(this.standalone){\n\t\tthis.webgl.bindOutputTexture(M, N + nPad, out);\n\t} else {\n\t\tthis.webgl.bindOutputTexture(M, (N + nPad)/ 4, out);\n\t}\n\n\t// initiate calculation\n\tgl.drawElements(gl.TRIANGLES, /*num items*/6, gl.UNSIGNED_SHORT, 0);\n\n\tthis.webgl.unbindInputTexture(gl.TEXTURE0);\n\n};\n\n/* Create a texture from the given texel data and bind it to our shader program.\n\n\th - number of rows in input matrix\n\tw - number of cols in input matrix\n\ttexels - packed data\n\ttextureUnit - the texture unit to bind to (gl.TEXTURE0, gl.TEXTURE1, etc)\n\tname - the uniform name to associate with (must match shader program)\n\n\tmust compile program (with createProgram) first\n*/\nSCLMPCalculator.prototype.bindInputTexture = function(texture, textureUnit, name){\n\tvar gl = this.webgl.context,\n\t\tprogram = this.program;\n\n\tgl.activeTexture(textureUnit); // gl.TEXTURE0, gl.TEXTURE1, etc\n\tgl.bindTexture(\t  gl.TEXTURE_2D, texture);\n\n\tvar sampler = gl.getUniformLocation(program, name);\n\tgl.uniform1i(sampler, textureUnit - gl.TEXTURE0);\n\n};\n\n/* Set up inputs for the texture shader\n\n */\nSCLMPCalculator.prototype.bindUniforms = function(N, pad, a, b) {\n\tvar gl = this.webgl.context;\n\n\t// get var locations\n\tvar N_gl = gl.getUniformLocation(this.program, SCLMPCalculator.LENGTH_UNIFORM_NAME),\n\t\tb_gl = gl.getUniformLocation(this.program, SCLMPCalculator.UPPER_UNIFORM_NAME),\n\t\ta_gl = gl.getUniformLocation(this.program, SCLMPCalculator.LOWER_UNIFORM_NAME),\n\t\tpad_gl = gl.getUniformLocation(this.program, \"pad\");\n\n\t// bind length of shared dimension\n\tgl.uniform1i(N_gl, N);\n\tgl.uniform1i(pad_gl, pad);\n\tgl.uniform1f(a_gl, a);\n\tgl.uniform1f(b_gl, b);\n\n};\n","var WebGL = require('./webgl');\n\n/*  a more general version of the BLAS Level 1 scale that works on matrices\n    and includes an elementwise scalar addition\n\n    a * X + b\n\n\twhere X is a matrix, a and b are scalars and operations are elementwise\n\n    to get the standard BLAS scal set M = 1 and b = 0\n\n\n\twebgl - a weblas.WebGL object\n\tstandalone - whether or not to automatically run the floating point encode\n\t\tstep for rendering to an UNSIGNED_BYTE texture (this is required for\n\t\tmobile, circa 2015) but can't be used as part of a pipeline.\n\n\t* uploads and downloads data\n\t* executes calculation\n */\nfunction SSCALCalculator(webgl, standalone){\n\tthis.webgl = webgl,\n\tthis.standalone = (standalone != null) ? standalone : true; // default to standalone mode\n\n\tvar s = \"precision highp float;\\n#define GLSLIFY 1\\n\\nvarying vec2      outTex;\\t// texture coords of row/column to calculate\\nuniform sampler2D X;\\t\\t// texture with data from padded X\\nuniform int       N;\\t\\t// number of columns\\nuniform int       pad;\\t\\t// additional columns to nearest multiple of four\\nuniform float     b; \\t\\t// additive term\\nuniform float     a; \\t\\t// multiplicative term\\n\\n// Render float to bytes according to IEEE 754 Floating Point\\nvec4 encode_float_1540259130(float val) {\\n\\n\\t// TODO: correctly handle denormal numbers\\n\\t// http://www.2ality.com/2012/04/number-encoding.html\\n\\tfloat a = abs(val);                           // encode absolute value + sign\\n\\tfloat exp = floor(log2(a));                 // number of powers of 2\\n\\tfloat mant = pow(2.,log2(a)-exp) * pow(2.,23.);  // multiply to fill 24 bits (implied leading 1)\\n\\tfloat mant1 = floor(mant / 256. / 256.);    // first 8 bits of mantissa\\n\\tfloat mant2 = mod(floor(mant / 256.),256.); // second 8 bits\\n\\tfloat mant3 = mod(mant,256.);               // third 8 bits\\n\\n\\thighp float sign = 128.-128.*(a/val);\\t\\t\\t// sign bit is 256 or 0\\n\\thighp float e = (sign+exp+127.)/510.;\\t\\t// exponent and sign\\n\\thighp float m1 = (mant1-(128.*(1.-mod(exp+127.,2.))))/255.; // handle leading bit\\n\\thighp float m2 = (mant2)/255.;\\t\\t\\t\\t// middle part\\n\\thighp float m3 = (mant3+.5)/255.;\\t\\t\\t// scale to 0 - 255\\n\\n\\treturn vec4(m3,m2,m1,e);\\n}\\n\\n// select an element from a vector based on index\\nfloat select_index_1604150559(vec4 v, int index){\\n\\tfloat val;\\n\\tif (index == 0) {\\n\\t\\tval = v.r;\\n\\t} else if(index == 1) {\\n\\t\\tval = v.g;\\n\\t} else if(index == 2) {\\n\\t\\tval = v.b;\\n\\t} else if(index == 3){\\n\\t\\tval = v.a;\\n\\t} else {\\n\\t\\t// should never be here\\n\\t\\tval = 0.0;\\n\\t}\\n\\n\\treturn val;\\n}\\n\\nvoid main(void) {\\n\\n\\t// get the implied row and column from .y and .x of passed (output)\\n\\t// texture coordinate. These map directly to input texture space when\\n\\t// the relevant dimensions are the same.\\n \\tfloat row = outTex.y;\\n\\tfloat col = outTex.x;\\n\\n\\t// direct usage of col requires output be padded exactly like input\\n\\tvec4 x = texture2D( X, vec2(col, row));\\n\\tvec4 sum_v = (a * x) + b;\\n\\tint channel = int(mod(col * float(N + pad), 4.0 ));\\n\\tfloat sum = select_index_1604150559(sum_v, channel);\\n\\n\\tif (sum == 0.) {\\n\\t\\tgl_FragColor = vec4(0.,0.,0.,0.);\\n\\t\\treturn;\\n\\t}\\n\\n \\t// output vec4 with bytes for an IEEE754 32-bit floating point number\\n\\tgl_FragColor = encode_float_1540259130(sum);\\n}\\n\",\n\t\tp = \"precision highp float;\\n#define GLSLIFY 1\\n\\nvarying vec2      outTex;\\t// texture coords of row/column to calculate\\nuniform sampler2D X;\\t\\t// texture with data from padded X\\nuniform int       N;\\t\\t// number of columns\\nuniform int       pad;\\t\\t// additional columns to nearest multiple of four\\nuniform float     b; \\t\\t// additive term\\nuniform float     a; \\t\\t// multiplicative term\\n\\n// set pad values to 0.0, if in padded region of output texture\\nvoid fix_pad_1540259130(inout vec4 v, int pad){\\n\\tv.a = 0.0;\\n\\tif(pad == 2){\\n\\t\\tv.b = 0.0;\\n\\t} else if(pad == 3){\\n\\t\\tv.b = 0.0;\\n\\t\\tv.g = 0.0;\\n\\t}\\n}\\n\\nvoid main(void) {\\n\\n\\t// get the implied row and column from .y and .x of passed (output)\\n\\t// texture coordinate. These map directly to input texture space when\\n\\t// the relevant dimensions are the same.\\n\\tfloat row_t = outTex.y;\\n\\tfloat col_t = outTex.x;\\n\\tfloat col = (col_t * float(N + pad) - 2.0); // index of first element in pixel (matrix space)\\n\\n\\t// direct usage of col requires output be padded exactly like input\\n\\tvec4 x = texture2D( X, vec2(col_t, row_t));\\n\\tvec4 sum_v = (a * x) + b;\\n\\n\\t// fix padded region\\n\\tif(pad > 0 && col + 4.0 > float(N) ) {\\n\\t\\tfix_pad_1540259130(sum_v, pad);\\n\\t}\\n\\n\\tgl_FragColor = sum_v;\\n}\\n\";\n\n\t// create the webgl shader program for this calculation\n\t// based on the specific fragment shader for this calculation\n\t// and the generic pass through shader\n\tif(this.standalone){\n\t\tthis.program = this.webgl.createProgram(s);\n\t} else {\n\t\tthis.program = this.webgl.createProgram(p);\n\t}\n}\n\nmodule.exports = SSCALCalculator;\n\n/* Names of the uniforms (variables) used in the shader program passed in on\n   each calculation.\n */\nSSCALCalculator.TEXTURE_UNIFORM_NAME_0 = \"X\";\nSSCALCalculator.LENGTH_UNIFORM_NAME = \"N\";\nSSCALCalculator.ADD_UNIFORM_NAME = \"b\";\nSSCALCalculator.MUL_UNIFORM_NAME = \"a\";\n\n/* Elementwise scale and offset a matrix\n\n\tM - number of rows in X\n\tN - number of columns in X\n\ta - scalar coefficient to X\n\tb - scalar offset of X\n\tX - matrix (texture)\n\tout - output (texture)\n\n  How this works:\n\n  1. Activate our shader program\n  2. Bind input textures\n  3. Set shader program parameters\n  4. Bind output texture\n  5. Activate calculation with `drawElements`\n\n */\nSSCALCalculator.prototype.calculate = function(M, N, a, b, X, out){\n\n\tvar gl = this.webgl.context;\n\n\tvar pad = this.webgl.getPad(N);\n\n\tthis.webgl.selectProgram(this.program);\n\n\t// create and bind our input texture using matrix data\n\tthis.bindInputTexture(X, gl.TEXTURE0, SSCALCalculator.TEXTURE_UNIFORM_NAME_0);\n\n\t// set the data specific variables in our shader program\n\tthis.bindUniforms(N, pad, a, b);\n\n\t// create our destination texture\n\tif(this.standalone){\n\t\tthis.webgl.bindOutputTexture(M, N + pad, out);\n\t} else {\n\t\tthis.webgl.bindOutputTexture(M, (N + pad)/ 4, out);\n\t}\n\n\n\t// initiate calculation\n\tgl.drawElements(gl.TRIANGLES, /*num items*/6, gl.UNSIGNED_SHORT, 0);\n\n\tthis.webgl.unbindInputTexture(gl.TEXTURE0);\n\n};\n\n/* Create a texture from the given texel data and bind it to our shader program.\n\n\ttexture - texture containing the data\n\ttextureUnit - the texture unit to bind to (gl.TEXTURE0, gl.TEXTURE1, etc)\n\tname - the uniform name to associate with (must match shader program)\n\n\tmust compile program (with createProgram) first\n*/\nSSCALCalculator.prototype.bindInputTexture = function(texture, textureUnit, name){\n\tvar gl = this.webgl.context,\n\t\tprogram = this.program;\n\n\tgl.activeTexture(textureUnit); // gl.TEXTURE0, gl.TEXTURE1, etc\n\tgl.bindTexture(\t  gl.TEXTURE_2D, texture);\n\n\tvar sampler = gl.getUniformLocation(program, name);\n\tgl.uniform1i(sampler, textureUnit - gl.TEXTURE0);\n\n};\n\n/* Set up inputs for the texture shader\n\n */\nSSCALCalculator.prototype.bindUniforms = function(N, pad, a, b) {\n\tvar gl = this.webgl.context;\n\n\t// get var locations\n\tvar N_gl = gl.getUniformLocation(this.program, SSCALCalculator.LENGTH_UNIFORM_NAME),\n\t\tb_gl = gl.getUniformLocation(this.program, SSCALCalculator.ADD_UNIFORM_NAME),\n\t\ta_gl = gl.getUniformLocation(this.program, SSCALCalculator.MUL_UNIFORM_NAME),\n\t\tpad_gl = gl.getUniformLocation(this.program, \"pad\");\n\n\t// bind length of shared dimension\n\tgl.uniform1i(N_gl, N);\n\tgl.uniform1i(pad_gl, pad);\n\tgl.uniform1f(a_gl, a);\n\tgl.uniform1f(b_gl, b);\n\n};\n","var WebGL = require('./webgl');\n\n/*  Downsample an image (useful in pooling layers).\n\n\n\n\twebgl - a weblas.WebGL object\n\tstandalone - whether or not to automatically run the floating point encode\n\t\tstep for rendering to an UNSIGNED_BYTE texture (this is required for\n\t\tmobile, circa 2015) but can't be used as part of a pipeline.\n\n\t* uploads and downloads data\n\t* executes calculation\n */\nfunction DownsampleCalculator(webgl, standalone){\n\tthis.webgl = webgl,\n\tthis.standalone = (standalone != null) ? standalone : true; // default to standalone mode\n\n\tvar s = \"// TODO: unroll loop for stride == factor and small values (2, 3)\\nprecision highp float;\\n#define GLSLIFY 1\\n\\nvarying vec2      outTex;  // texture coords of row/column to calculate\\nuniform sampler2D X;       // texture with data from padded A\\nuniform int       factor;  // width of image patch\\nuniform float     stride;  // width between image patches\\nuniform float     C;       // number of channels\\nuniform float     M;\\nuniform float     N;\\nuniform float     N_out;\\nuniform float     M_out;\\n\\n// Render float to bytes according to IEEE 754 Floating Point\\nvec4 encode_float_1540259130(float val) {\\n\\n\\t// TODO: correctly handle denormal numbers\\n\\t// http://www.2ality.com/2012/04/number-encoding.html\\n\\tfloat a = abs(val);                           // encode absolute value + sign\\n\\tfloat exp = floor(log2(a));                 // number of powers of 2\\n\\tfloat mant = pow(2.,log2(a)-exp) * pow(2.,23.);  // multiply to fill 24 bits (implied leading 1)\\n\\tfloat mant1 = floor(mant / 256. / 256.);    // first 8 bits of mantissa\\n\\tfloat mant2 = mod(floor(mant / 256.),256.); // second 8 bits\\n\\tfloat mant3 = mod(mant,256.);               // third 8 bits\\n\\n\\thighp float sign = 128.-128.*(a/val);\\t\\t\\t// sign bit is 256 or 0\\n\\thighp float e = (sign+exp+127.)/510.;\\t\\t// exponent and sign\\n\\thighp float m1 = (mant1-(128.*(1.-mod(exp+127.,2.))))/255.; // handle leading bit\\n\\thighp float m2 = (mant2)/255.;\\t\\t\\t\\t// middle part\\n\\thighp float m3 = (mant3+.5)/255.;\\t\\t\\t// scale to 0 - 255\\n\\n\\treturn vec4(m3,m2,m1,e);\\n}\\n\\n// select an element from a vector based on index\\nfloat select_index_1604150559(vec4 v, int index){\\n\\tfloat val;\\n\\tif (index == 0) {\\n\\t\\tval = v.r;\\n\\t} else if(index == 1) {\\n\\t\\tval = v.g;\\n\\t} else if(index == 2) {\\n\\t\\tval = v.b;\\n\\t} else if(index == 3){\\n\\t\\tval = v.a;\\n\\t} else {\\n\\t\\t// should never be here\\n\\t\\tval = 0.0;\\n\\t}\\n\\n\\treturn val;\\n}\\n\\nvoid main(void) {\\n\\n\\t// get the implied row and column from .y and .x of passed (output)\\n\\t// texture coordinate and translate to output pixel space.\\n\\tfloat row = floor(outTex.y * M_out);   // row on output texture (matrix space)\\n\\tfloat col = floor(outTex.x * N_out); // column on output texture (matrix space)\\n\\tfloat vcol = floor(col / C);   // virtual column on output texture (matrix space)\\n\\tfloat vchannel = floor(mod(col, C)); // virtual channel on output texture\\n\\n\\tconst float min = -1.0e+08;\\n\\tvec4 currentMax = vec4(min, min, min, min);\\n\\n\\tfloat deltaY = 1.0/M;\\n\\tfloat deltaX = 1.0/N;\\n\\tfloat y = ((row * stride) + 0.5)*deltaY; // texture position of input row\\n\\tfloat x;\\n\\tfloat z = vchannel * deltaX;\\n\\tfor (int i = 0; i < 100; i += 1) {\\n\\t\\tif (i >= factor) {\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t\\tx = ((vcol * stride * C) + 0.5) * deltaX; // texture position of input column\\n\\n\\t\\tfor (int j = 0; j < 100; j += 1) {\\n\\t\\t\\tif (j >= factor) {\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\t}\\n\\n\\t\\t\\tvec2 coords = vec2(x + z, y);\\n\\t\\t\\tvec4 x_v = texture2D(X, coords);\\n\\t\\t\\tcurrentMax = max(currentMax, x_v);\\n\\n\\t\\t\\tx += (deltaX * C);\\n\\t\\t}\\n\\t\\ty += deltaY;\\n\\t}\\n\\tint chan = int(mod(outTex.x * N_out, 4.0 ));\\n\\tfloat val = select_index_1604150559(currentMax, int(chan));\\n\\tif (val == 0.) {\\n\\t\\tgl_FragColor = vec4(0.,0.,0.,0.);\\n\\t\\treturn;\\n\\t}\\n\\n\\tgl_FragColor = encode_float_1540259130(val);\\n}\\n\";\n\t\tp = \"// TODO: unroll loop for stride == factor and small values (2, 3)\\nprecision highp float;\\n#define GLSLIFY 1\\n\\nvarying vec2      outTex;  // texture coords of row/column to calculate\\nuniform sampler2D X;       // texture with data from padded A\\nuniform int       factor;  // width of image patch\\nuniform float     stride;  // width between image patches\\nuniform float     C;       // number of channels\\nuniform float     M;\\nuniform float     N;\\nuniform float     N_out;\\nuniform float     M_out;\\n\\nvoid main(void) {\\n\\n\\t// get the implied row and column from .y and .x of passed (output)\\n\\t// texture coordinate and translate to output pixel space.\\n\\tfloat row = floor(outTex.y * M_out);   // row on output texture (pixel space)\\n\\tfloat col = floor(outTex.x * N_out); // column on output texture (matrix space)\\n\\tfloat vcol = floor(col / C);   // virtual column on output texture (matrix space)\\n\\tfloat vchannel = floor(mod(col, C)); // virtual channel on output texture\\n\\n\\tconst float min = -1.0e+08;\\n\\tvec4 currentMax = vec4(min, min, min, min);\\n\\n\\tfloat deltaY = 1.0/M;\\n\\tfloat deltaX = 1.0/N;\\n\\tfloat y = ((row * stride) + 0.5)*deltaY; // texture position of input row\\n\\tfloat x;\\n\\tfloat z = vchannel * deltaX;\\n\\tfor (int i = 0; i < 100; i += 1) {\\n\\t\\tif (i >= factor) {\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t\\tx = ((vcol * stride * C) + 0.5) * deltaX; // texture position of input column\\n\\n\\t\\tfor (int j = 0; j < 100; j += 1) {\\n\\t\\t\\tif (j >= factor) {\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\t}\\n\\n\\t\\t\\tvec2 coords = vec2(x + z, y);\\n\\t\\t\\tvec4 x_v = texture2D(X, coords);\\n\\t\\t\\tcurrentMax = max(currentMax, x_v);\\n\\n\\t\\t\\tx += (deltaX * C);\\n\\t\\t}\\n\\t\\ty += deltaY;\\n\\t}\\n\\n\\tgl_FragColor = currentMax;\\n}\\n\";\n\n\t// create the webgl shader program for this calculation\n\t// based on the specific fragment shader for this calculation\n\t// and the generic pass through shader\n\tif(this.standalone){\n\t\tthis.program = this.webgl.createProgram(s);\n\t} else {\n\t\tthis.program = this.webgl.createProgram(p);\n\t}\n}\n\nmodule.exports = DownsampleCalculator;\n\n/* Names of the uniforms (variables) used in the shader program passed in on\n   each calculation.\n */\nDownsampleCalculator.TEXTURE_UNIFORM_NAME_0 = \"X\";\nDownsampleCalculator.INPUT_ROW_COUNT_UNIFORM_NAME = \"M\";\nDownsampleCalculator.INPUT_COLUMN_COUNT_UNIFORM_NAME = \"N\";\nDownsampleCalculator.OUTPUT_ROW_COUNT_UNIFORM_NAME = \"M_out\";\nDownsampleCalculator.OUTPUT_COLUMN_COUNT_UNIFORM_NAME = \"N_out\";\nDownsampleCalculator.FACTOR_UNIFORM_NAME = \"factor\";\nDownsampleCalculator.STRIDE_UNIFORM_NAME = \"stride\";\nDownsampleCalculator.CHANNEL_COUNT_UNIFORM_NAME = \"C\";\n\n\n/* Downsample (pool) the input using the maximum for each channel.\n\n\tM - rows in X\n\tN - columns in X\n\tc - (channels / 4) in X\n\tfactor - the number of pixels (width and height) to combine\n\tstride - amount between groups of pixels\n\tX - input matrix (texture)\n\tout - output (texture)\n\n  How this works:\n\n  1. Activate our shader program\n  2. Bind input textures\n  3. Set shader program parameters\n  4. Bind output texture\n  5. Activate calculation with `drawElements`\n\n */\nDownsampleCalculator.prototype.calculate = function(M, N, channels, factor, stride, X, out){\n\n\tif(channels % WebGL.COMPONENTS_PER_TEXEL != 0){\n\t\tthrow new Error(\"Channel count must be a multiple of \" + WebGL.COMPONENTS_PER_TEXEL);\n\t}\n\tvar gl = this.webgl.context;\n\n    var N_out = (Math.floor((N - factor) / stride) + 1) * channels;\n    var M_out = Math.floor((M - factor) / stride) + 1;\n\n\tthis.webgl.selectProgram(this.program);\n\n\t// create and bind our input texture using matrix data\n\tthis.bindInputTexture(X, gl.TEXTURE0, DownsampleCalculator.TEXTURE_UNIFORM_NAME_0);\n\n\n\t// set the data specific variables in our shader program\n\tthis.bindUniforms(M, N * channels, M_out, N_out, factor, stride, channels);\n\n\t// create our destination texture\n\tif(this.standalone){\n\t\tthis.webgl.bindOutputTexture(M_out, N_out, out);\n\t} else {\n\t\tthis.webgl.bindOutputTexture(M_out, N_out/WebGL.COMPONENTS_PER_TEXEL, out);\n\t}\n\n\n\t// initiate calculation\n\tgl.drawElements(gl.TRIANGLES, /*num items*/6, gl.UNSIGNED_SHORT, 0);\n\n\tthis.webgl.unbindInputTexture(gl.TEXTURE0);\n\n};\n\n/* Create a texture from the given texel data and bind it to our shader program.\n\n\ttexture - texture containing input values to bind\n\ttextureUnit - the texture unit to bind to (gl.TEXTURE0, gl.TEXTURE1, etc)\n\tname - the uniform name to associate with (must match shader program)\n\n\tmust compile program (with createProgram) first\n*/\nDownsampleCalculator.prototype.bindInputTexture = function(texture, textureUnit, name){\n\tvar gl = this.webgl.context,\n\t\tprogram = this.program;\n\n\tgl.activeTexture(textureUnit); // gl.TEXTURE0, gl.TEXTURE1, etc\n\tgl.bindTexture(\t  gl.TEXTURE_2D, texture);\n\n\tvar sampler = gl.getUniformLocation(program, name);\n\tgl.uniform1i(sampler, textureUnit - gl.TEXTURE0);\n\n};\n\n/* Set up inputs for the texture shader\n\n */\nDownsampleCalculator.prototype.bindUniforms = function(M, N, M_out, N_out, factor, stride, c) {\n\tvar gl = this.webgl.context;\n\n\t// get var locations\n\tvar M_gl = gl.getUniformLocation(this.program, DownsampleCalculator.INPUT_ROW_COUNT_UNIFORM_NAME),\n\t\tN_gl = gl.getUniformLocation(this.program, DownsampleCalculator.INPUT_COLUMN_COUNT_UNIFORM_NAME),\n\t\tM_out_gl = gl.getUniformLocation(this.program, DownsampleCalculator.OUTPUT_ROW_COUNT_UNIFORM_NAME),\n\t\tN_out_gl = gl.getUniformLocation(this.program, DownsampleCalculator.OUTPUT_COLUMN_COUNT_UNIFORM_NAME),\n\t\tfactor_gl = gl.getUniformLocation(this.program, DownsampleCalculator.FACTOR_UNIFORM_NAME),\n\t\tstride_gl = gl.getUniformLocation(this.program, DownsampleCalculator.STRIDE_UNIFORM_NAME),\n\t\tchannel_count_gl = gl.getUniformLocation(this.program, DownsampleCalculator.CHANNEL_COUNT_UNIFORM_NAME);\n\n\t// bind length of shared dimension\n\tgl.uniform1f(M_gl, M);\n\tgl.uniform1f(N_gl, N);\n\tgl.uniform1f(M_out_gl, M_out);\n\tgl.uniform1f(N_out_gl, N_out);\n\tgl.uniform1i(factor_gl, factor);\n\tgl.uniform1f(stride_gl, stride);\n\tgl.uniform1f(channel_count_gl, c);\n\n};\n","var globals = require(\"./globals\");\n\nvar gl = globals.gl;\n\nfunction Tensor(shape, data){\n\tif(shape.length != 2)\n\t\tthrow new Error(\"Only Tensor of order two (matrix) is supported right now.\");\n\n\tvar M = shape[0],\n\t\tN = shape[1];\n\n\tthis.texture = gl.createDataTexture(M, N, data);\n\n\tthis.shape = [M, N];\n}\n\nmodule.exports = Tensor;\n\nTensor.prototype.delete = function(){\n\tgl.context.deleteTexture(this.texture);\n\tthis.texture = null;\n\tthis.shape = null;\n};\n\nTensor.prototype.transfer = function(keep){\n\n\tvar M = this.shape[0],\n\t\tN = this.shape[1],\n\t\tout,\n\t\tresult;\n\n\t// create output texture\n\tout = gl.createOutputTexture(M, N);\n\n\t// float extraction\n\tgl.encode(M, N, this.texture, out);\n\n\tresult = new Float32Array(gl.readData(M, N));\n\n\t// clean up\n\tgl.context.deleteTexture(out);\n\n\tif(!keep){\n\t\tthis.delete();\n\t}\n\n\treturn result;\n};\n\nTensor.prototype.reshape = function(shape, keep){\n\n\tvar M = this.shape[0],\n\t\tN = this.shape[1],\n\t\tM_out = shape[0],\n\t\tN_out = shape[1];\n\n\t// create new texture to hold tranpose\n\tvar t0 = new Tensor(shape, null);\n\n\t// invoke shader\n\tgl.reshape(M, N, M_out, N_out, this.texture, t0.texture);\n\n\tif(!keep){\n\t\tthis.delete();\n\t}\n\n\treturn t0;\n};\n\nTensor.prototype.transpose = function(keep){\n\n\tvar M = this.shape[0],\n\t\tN = this.shape[1];\n\n\t// create new texture to hold tranpose\n\tvar tT = new Tensor([N, M], null);\n\n\t// invoke shader\n\tgl.transpose(M, N, this.texture, tT.texture);\n\n\tif(!keep){\n\t\tthis.delete();\n\t}\n\n\treturn tT;\n};\n\nTensor.prototype.split = function(stride, keep){\n\n\tvar M = this.shape[0],\n\t\tN = this.shape[1];\n\n\tif(N % 2 !== 0)\n\t\tthrow new Error(\"row count must be multiple of two.\");\n\n\n\t// create new texture to hold tranpose\n\tvar t0 = new Tensor([M, N/2], null),\n\t\tt1 = new Tensor([M, N/2], null);\n\n\tgl.submatrix(N, M, N/2, stride, 0, this.texture, t0.texture);\n\tgl.submatrix(N, M, N/2, stride, 1, this.texture, t1.texture);\n\n\tif(!keep){\n\t\tthis.delete();\n\t}\n\n\treturn [t0, t1];\n}\n\nTensor.combine = function(t0, t1, stride, keep){\n\n\tvar M = t0.shape[0],\n\t\tN = t0.shape[1];\n\n\tif(t0.shape[1] !== t1.shape[1] || t0.shape[0] !== t1.shape[0])\n\t\tthrow new Error(\"row and column counts must be equal.\");\n\n\tif(stride % 4 !== 0)\n\t\tthrow new Error(\"stride must be a multiple of four\");\n\n\t// create new texture to hold tranpose\n\tvar t2 = new Tensor([M, N * 2], null);\n\n\tgl.combine(M, N, stride, t0.texture, t1.texture, t2.texture);\n\n\tif(!keep){\n\t\tt0.delete();\n\t\tt1.delete();\n\t}\n\n\treturn t2;\n}\n","/*!\n * async\n * https://github.com/caolan/async\n *\n * Copyright 2010-2014 Caolan McMahon\n * Released under the MIT license\n */\n(function () {\n\n    var async = {};\n    function noop() {}\n    function identity(v) {\n        return v;\n    }\n    function toBool(v) {\n        return !!v;\n    }\n    function notId(v) {\n        return !v;\n    }\n\n    // global on the server, window in the browser\n    var previous_async;\n\n    // Establish the root object, `window` (`self`) in the browser, `global`\n    // on the server, or `this` in some virtual machines. We use `self`\n    // instead of `window` for `WebWorker` support.\n    var root = typeof self === 'object' && self.self === self && self ||\n            typeof global === 'object' && global.global === global && global ||\n            this;\n\n    if (root != null) {\n        previous_async = root.async;\n    }\n\n    async.noConflict = function () {\n        root.async = previous_async;\n        return async;\n    };\n\n    function only_once(fn) {\n        return function() {\n            if (fn === null) throw new Error(\"Callback was already called.\");\n            fn.apply(this, arguments);\n            fn = null;\n        };\n    }\n\n    function _once(fn) {\n        return function() {\n            if (fn === null) return;\n            fn.apply(this, arguments);\n            fn = null;\n        };\n    }\n\n    //// cross-browser compatiblity functions ////\n\n    var _toString = Object.prototype.toString;\n\n    var _isArray = Array.isArray || function (obj) {\n        return _toString.call(obj) === '[object Array]';\n    };\n\n    // Ported from underscore.js isObject\n    var _isObject = function(obj) {\n        var type = typeof obj;\n        return type === 'function' || type === 'object' && !!obj;\n    };\n\n    function _isArrayLike(arr) {\n        return _isArray(arr) || (\n            // has a positive integer length property\n            typeof arr.length === \"number\" &&\n            arr.length >= 0 &&\n            arr.length % 1 === 0\n        );\n    }\n\n    function _arrayEach(arr, iterator) {\n        var index = -1,\n            length = arr.length;\n\n        while (++index < length) {\n            iterator(arr[index], index, arr);\n        }\n    }\n\n    function _map(arr, iterator) {\n        var index = -1,\n            length = arr.length,\n            result = Array(length);\n\n        while (++index < length) {\n            result[index] = iterator(arr[index], index, arr);\n        }\n        return result;\n    }\n\n    function _range(count) {\n        return _map(Array(count), function (v, i) { return i; });\n    }\n\n    function _reduce(arr, iterator, memo) {\n        _arrayEach(arr, function (x, i, a) {\n            memo = iterator(memo, x, i, a);\n        });\n        return memo;\n    }\n\n    function _forEachOf(object, iterator) {\n        _arrayEach(_keys(object), function (key) {\n            iterator(object[key], key);\n        });\n    }\n\n    function _indexOf(arr, item) {\n        for (var i = 0; i < arr.length; i++) {\n            if (arr[i] === item) return i;\n        }\n        return -1;\n    }\n\n    var _keys = Object.keys || function (obj) {\n        var keys = [];\n        for (var k in obj) {\n            if (obj.hasOwnProperty(k)) {\n                keys.push(k);\n            }\n        }\n        return keys;\n    };\n\n    function _keyIterator(coll) {\n        var i = -1;\n        var len;\n        var keys;\n        if (_isArrayLike(coll)) {\n            len = coll.length;\n            return function next() {\n                i++;\n                return i < len ? i : null;\n            };\n        } else {\n            keys = _keys(coll);\n            len = keys.length;\n            return function next() {\n                i++;\n                return i < len ? keys[i] : null;\n            };\n        }\n    }\n\n    // Similar to ES6's rest param (http://ariya.ofilabs.com/2013/03/es6-and-rest-parameter.html)\n    // This accumulates the arguments passed into an array, after a given index.\n    // From underscore.js (https://github.com/jashkenas/underscore/pull/2140).\n    function _restParam(func, startIndex) {\n        startIndex = startIndex == null ? func.length - 1 : +startIndex;\n        return function() {\n            var length = Math.max(arguments.length - startIndex, 0);\n            var rest = Array(length);\n            for (var index = 0; index < length; index++) {\n                rest[index] = arguments[index + startIndex];\n            }\n            switch (startIndex) {\n                case 0: return func.call(this, rest);\n                case 1: return func.call(this, arguments[0], rest);\n            }\n            // Currently unused but handle cases outside of the switch statement:\n            // var args = Array(startIndex + 1);\n            // for (index = 0; index < startIndex; index++) {\n            //     args[index] = arguments[index];\n            // }\n            // args[startIndex] = rest;\n            // return func.apply(this, args);\n        };\n    }\n\n    function _withoutIndex(iterator) {\n        return function (value, index, callback) {\n            return iterator(value, callback);\n        };\n    }\n\n    //// exported async module functions ////\n\n    //// nextTick implementation with browser-compatible fallback ////\n\n    // capture the global reference to guard against fakeTimer mocks\n    var _setImmediate = typeof setImmediate === 'function' && setImmediate;\n\n    var _delay = _setImmediate ? function(fn) {\n        // not a direct alias for IE10 compatibility\n        _setImmediate(fn);\n    } : function(fn) {\n        setTimeout(fn, 0);\n    };\n\n    if (typeof process === 'object' && typeof process.nextTick === 'function') {\n        async.nextTick = process.nextTick;\n    } else {\n        async.nextTick = _delay;\n    }\n    async.setImmediate = _setImmediate ? _delay : async.nextTick;\n\n\n    async.forEach =\n    async.each = function (arr, iterator, callback) {\n        return async.eachOf(arr, _withoutIndex(iterator), callback);\n    };\n\n    async.forEachSeries =\n    async.eachSeries = function (arr, iterator, callback) {\n        return async.eachOfSeries(arr, _withoutIndex(iterator), callback);\n    };\n\n\n    async.forEachLimit =\n    async.eachLimit = function (arr, limit, iterator, callback) {\n        return _eachOfLimit(limit)(arr, _withoutIndex(iterator), callback);\n    };\n\n    async.forEachOf =\n    async.eachOf = function (object, iterator, callback) {\n        callback = _once(callback || noop);\n        object = object || [];\n\n        var iter = _keyIterator(object);\n        var key, completed = 0;\n\n        while ((key = iter()) != null) {\n            completed += 1;\n            iterator(object[key], key, only_once(done));\n        }\n\n        if (completed === 0) callback(null);\n\n        function done(err) {\n            completed--;\n            if (err) {\n                callback(err);\n            }\n            // Check key is null in case iterator isn't exhausted\n            // and done resolved synchronously.\n            else if (key === null && completed <= 0) {\n                callback(null);\n            }\n        }\n    };\n\n    async.forEachOfSeries =\n    async.eachOfSeries = function (obj, iterator, callback) {\n        callback = _once(callback || noop);\n        obj = obj || [];\n        var nextKey = _keyIterator(obj);\n        var key = nextKey();\n        function iterate() {\n            var sync = true;\n            if (key === null) {\n                return callback(null);\n            }\n            iterator(obj[key], key, only_once(function (err) {\n                if (err) {\n                    callback(err);\n                }\n                else {\n                    key = nextKey();\n                    if (key === null) {\n                        return callback(null);\n                    } else {\n                        if (sync) {\n                            async.setImmediate(iterate);\n                        } else {\n                            iterate();\n                        }\n                    }\n                }\n            }));\n            sync = false;\n        }\n        iterate();\n    };\n\n\n\n    async.forEachOfLimit =\n    async.eachOfLimit = function (obj, limit, iterator, callback) {\n        _eachOfLimit(limit)(obj, iterator, callback);\n    };\n\n    function _eachOfLimit(limit) {\n\n        return function (obj, iterator, callback) {\n            callback = _once(callback || noop);\n            obj = obj || [];\n            var nextKey = _keyIterator(obj);\n            if (limit <= 0) {\n                return callback(null);\n            }\n            var done = false;\n            var running = 0;\n            var errored = false;\n\n            (function replenish () {\n                if (done && running <= 0) {\n                    return callback(null);\n                }\n\n                while (running < limit && !errored) {\n                    var key = nextKey();\n                    if (key === null) {\n                        done = true;\n                        if (running <= 0) {\n                            callback(null);\n                        }\n                        return;\n                    }\n                    running += 1;\n                    iterator(obj[key], key, only_once(function (err) {\n                        running -= 1;\n                        if (err) {\n                            callback(err);\n                            errored = true;\n                        }\n                        else {\n                            replenish();\n                        }\n                    }));\n                }\n            })();\n        };\n    }\n\n\n    function doParallel(fn) {\n        return function (obj, iterator, callback) {\n            return fn(async.eachOf, obj, iterator, callback);\n        };\n    }\n    function doParallelLimit(fn) {\n        return function (obj, limit, iterator, callback) {\n            return fn(_eachOfLimit(limit), obj, iterator, callback);\n        };\n    }\n    function doSeries(fn) {\n        return function (obj, iterator, callback) {\n            return fn(async.eachOfSeries, obj, iterator, callback);\n        };\n    }\n\n    function _asyncMap(eachfn, arr, iterator, callback) {\n        callback = _once(callback || noop);\n        arr = arr || [];\n        var results = _isArrayLike(arr) ? [] : {};\n        eachfn(arr, function (value, index, callback) {\n            iterator(value, function (err, v) {\n                results[index] = v;\n                callback(err);\n            });\n        }, function (err) {\n            callback(err, results);\n        });\n    }\n\n    async.map = doParallel(_asyncMap);\n    async.mapSeries = doSeries(_asyncMap);\n    async.mapLimit = doParallelLimit(_asyncMap);\n\n    // reduce only has a series version, as doing reduce in parallel won't\n    // work in many situations.\n    async.inject =\n    async.foldl =\n    async.reduce = function (arr, memo, iterator, callback) {\n        async.eachOfSeries(arr, function (x, i, callback) {\n            iterator(memo, x, function (err, v) {\n                memo = v;\n                callback(err);\n            });\n        }, function (err) {\n            callback(err, memo);\n        });\n    };\n\n    async.foldr =\n    async.reduceRight = function (arr, memo, iterator, callback) {\n        var reversed = _map(arr, identity).reverse();\n        async.reduce(reversed, memo, iterator, callback);\n    };\n\n    async.transform = function (arr, memo, iterator, callback) {\n        if (arguments.length === 3) {\n            callback = iterator;\n            iterator = memo;\n            memo = _isArray(arr) ? [] : {};\n        }\n\n        async.eachOf(arr, function(v, k, cb) {\n            iterator(memo, v, k, cb);\n        }, function(err) {\n            callback(err, memo);\n        });\n    };\n\n    function _filter(eachfn, arr, iterator, callback) {\n        var results = [];\n        eachfn(arr, function (x, index, callback) {\n            iterator(x, function (v) {\n                if (v) {\n                    results.push({index: index, value: x});\n                }\n                callback();\n            });\n        }, function () {\n            callback(_map(results.sort(function (a, b) {\n                return a.index - b.index;\n            }), function (x) {\n                return x.value;\n            }));\n        });\n    }\n\n    async.select =\n    async.filter = doParallel(_filter);\n\n    async.selectLimit =\n    async.filterLimit = doParallelLimit(_filter);\n\n    async.selectSeries =\n    async.filterSeries = doSeries(_filter);\n\n    function _reject(eachfn, arr, iterator, callback) {\n        _filter(eachfn, arr, function(value, cb) {\n            iterator(value, function(v) {\n                cb(!v);\n            });\n        }, callback);\n    }\n    async.reject = doParallel(_reject);\n    async.rejectLimit = doParallelLimit(_reject);\n    async.rejectSeries = doSeries(_reject);\n\n    function _createTester(eachfn, check, getResult) {\n        return function(arr, limit, iterator, cb) {\n            function done() {\n                if (cb) cb(getResult(false, void 0));\n            }\n            function iteratee(x, _, callback) {\n                if (!cb) return callback();\n                iterator(x, function (v) {\n                    if (cb && check(v)) {\n                        cb(getResult(true, x));\n                        cb = iterator = false;\n                    }\n                    callback();\n                });\n            }\n            if (arguments.length > 3) {\n                eachfn(arr, limit, iteratee, done);\n            } else {\n                cb = iterator;\n                iterator = limit;\n                eachfn(arr, iteratee, done);\n            }\n        };\n    }\n\n    async.any =\n    async.some = _createTester(async.eachOf, toBool, identity);\n\n    async.someLimit = _createTester(async.eachOfLimit, toBool, identity);\n\n    async.all =\n    async.every = _createTester(async.eachOf, notId, notId);\n\n    async.everyLimit = _createTester(async.eachOfLimit, notId, notId);\n\n    function _findGetResult(v, x) {\n        return x;\n    }\n    async.detect = _createTester(async.eachOf, identity, _findGetResult);\n    async.detectSeries = _createTester(async.eachOfSeries, identity, _findGetResult);\n    async.detectLimit = _createTester(async.eachOfLimit, identity, _findGetResult);\n\n    async.sortBy = function (arr, iterator, callback) {\n        async.map(arr, function (x, callback) {\n            iterator(x, function (err, criteria) {\n                if (err) {\n                    callback(err);\n                }\n                else {\n                    callback(null, {value: x, criteria: criteria});\n                }\n            });\n        }, function (err, results) {\n            if (err) {\n                return callback(err);\n            }\n            else {\n                callback(null, _map(results.sort(comparator), function (x) {\n                    return x.value;\n                }));\n            }\n\n        });\n\n        function comparator(left, right) {\n            var a = left.criteria, b = right.criteria;\n            return a < b ? -1 : a > b ? 1 : 0;\n        }\n    };\n\n    async.auto = function (tasks, concurrency, callback) {\n        if (typeof arguments[1] === 'function') {\n            // concurrency is optional, shift the args.\n            callback = concurrency;\n            concurrency = null;\n        }\n        callback = _once(callback || noop);\n        var keys = _keys(tasks);\n        var remainingTasks = keys.length;\n        if (!remainingTasks) {\n            return callback(null);\n        }\n        if (!concurrency) {\n            concurrency = remainingTasks;\n        }\n\n        var results = {};\n        var runningTasks = 0;\n\n        var hasError = false;\n\n        var listeners = [];\n        function addListener(fn) {\n            listeners.unshift(fn);\n        }\n        function removeListener(fn) {\n            var idx = _indexOf(listeners, fn);\n            if (idx >= 0) listeners.splice(idx, 1);\n        }\n        function taskComplete() {\n            remainingTasks--;\n            _arrayEach(listeners.slice(0), function (fn) {\n                fn();\n            });\n        }\n\n        addListener(function () {\n            if (!remainingTasks) {\n                callback(null, results);\n            }\n        });\n\n        _arrayEach(keys, function (k) {\n            if (hasError) return;\n            var task = _isArray(tasks[k]) ? tasks[k]: [tasks[k]];\n            var taskCallback = _restParam(function(err, args) {\n                runningTasks--;\n                if (args.length <= 1) {\n                    args = args[0];\n                }\n                if (err) {\n                    var safeResults = {};\n                    _forEachOf(results, function(val, rkey) {\n                        safeResults[rkey] = val;\n                    });\n                    safeResults[k] = args;\n                    hasError = true;\n\n                    callback(err, safeResults);\n                }\n                else {\n                    results[k] = args;\n                    async.setImmediate(taskComplete);\n                }\n            });\n            var requires = task.slice(0, task.length - 1);\n            // prevent dead-locks\n            var len = requires.length;\n            var dep;\n            while (len--) {\n                if (!(dep = tasks[requires[len]])) {\n                    throw new Error('Has nonexistent dependency in ' + requires.join(', '));\n                }\n                if (_isArray(dep) && _indexOf(dep, k) >= 0) {\n                    throw new Error('Has cyclic dependencies');\n                }\n            }\n            function ready() {\n                return runningTasks < concurrency && _reduce(requires, function (a, x) {\n                    return (a && results.hasOwnProperty(x));\n                }, true) && !results.hasOwnProperty(k);\n            }\n            if (ready()) {\n                runningTasks++;\n                task[task.length - 1](taskCallback, results);\n            }\n            else {\n                addListener(listener);\n            }\n            function listener() {\n                if (ready()) {\n                    runningTasks++;\n                    removeListener(listener);\n                    task[task.length - 1](taskCallback, results);\n                }\n            }\n        });\n    };\n\n\n\n    async.retry = function(times, task, callback) {\n        var DEFAULT_TIMES = 5;\n        var DEFAULT_INTERVAL = 0;\n\n        var attempts = [];\n\n        var opts = {\n            times: DEFAULT_TIMES,\n            interval: DEFAULT_INTERVAL\n        };\n\n        function parseTimes(acc, t){\n            if(typeof t === 'number'){\n                acc.times = parseInt(t, 10) || DEFAULT_TIMES;\n            } else if(typeof t === 'object'){\n                acc.times = parseInt(t.times, 10) || DEFAULT_TIMES;\n                acc.interval = parseInt(t.interval, 10) || DEFAULT_INTERVAL;\n            } else {\n                throw new Error('Unsupported argument type for \\'times\\': ' + typeof t);\n            }\n        }\n\n        var length = arguments.length;\n        if (length < 1 || length > 3) {\n            throw new Error('Invalid arguments - must be either (task), (task, callback), (times, task) or (times, task, callback)');\n        } else if (length <= 2 && typeof times === 'function') {\n            callback = task;\n            task = times;\n        }\n        if (typeof times !== 'function') {\n            parseTimes(opts, times);\n        }\n        opts.callback = callback;\n        opts.task = task;\n\n        function wrappedTask(wrappedCallback, wrappedResults) {\n            function retryAttempt(task, finalAttempt) {\n                return function(seriesCallback) {\n                    task(function(err, result){\n                        seriesCallback(!err || finalAttempt, {err: err, result: result});\n                    }, wrappedResults);\n                };\n            }\n\n            function retryInterval(interval){\n                return function(seriesCallback){\n                    setTimeout(function(){\n                        seriesCallback(null);\n                    }, interval);\n                };\n            }\n\n            while (opts.times) {\n\n                var finalAttempt = !(opts.times-=1);\n                attempts.push(retryAttempt(opts.task, finalAttempt));\n                if(!finalAttempt && opts.interval > 0){\n                    attempts.push(retryInterval(opts.interval));\n                }\n            }\n\n            async.series(attempts, function(done, data){\n                data = data[data.length - 1];\n                (wrappedCallback || opts.callback)(data.err, data.result);\n            });\n        }\n\n        // If a callback is passed, run this as a controll flow\n        return opts.callback ? wrappedTask() : wrappedTask;\n    };\n\n    async.waterfall = function (tasks, callback) {\n        callback = _once(callback || noop);\n        if (!_isArray(tasks)) {\n            var err = new Error('First argument to waterfall must be an array of functions');\n            return callback(err);\n        }\n        if (!tasks.length) {\n            return callback();\n        }\n        function wrapIterator(iterator) {\n            return _restParam(function (err, args) {\n                if (err) {\n                    callback.apply(null, [err].concat(args));\n                }\n                else {\n                    var next = iterator.next();\n                    if (next) {\n                        args.push(wrapIterator(next));\n                    }\n                    else {\n                        args.push(callback);\n                    }\n                    ensureAsync(iterator).apply(null, args);\n                }\n            });\n        }\n        wrapIterator(async.iterator(tasks))();\n    };\n\n    function _parallel(eachfn, tasks, callback) {\n        callback = callback || noop;\n        var results = _isArrayLike(tasks) ? [] : {};\n\n        eachfn(tasks, function (task, key, callback) {\n            task(_restParam(function (err, args) {\n                if (args.length <= 1) {\n                    args = args[0];\n                }\n                results[key] = args;\n                callback(err);\n            }));\n        }, function (err) {\n            callback(err, results);\n        });\n    }\n\n    async.parallel = function (tasks, callback) {\n        _parallel(async.eachOf, tasks, callback);\n    };\n\n    async.parallelLimit = function(tasks, limit, callback) {\n        _parallel(_eachOfLimit(limit), tasks, callback);\n    };\n\n    async.series = function(tasks, callback) {\n        _parallel(async.eachOfSeries, tasks, callback);\n    };\n\n    async.iterator = function (tasks) {\n        function makeCallback(index) {\n            function fn() {\n                if (tasks.length) {\n                    tasks[index].apply(null, arguments);\n                }\n                return fn.next();\n            }\n            fn.next = function () {\n                return (index < tasks.length - 1) ? makeCallback(index + 1): null;\n            };\n            return fn;\n        }\n        return makeCallback(0);\n    };\n\n    async.apply = _restParam(function (fn, args) {\n        return _restParam(function (callArgs) {\n            return fn.apply(\n                null, args.concat(callArgs)\n            );\n        });\n    });\n\n    function _concat(eachfn, arr, fn, callback) {\n        var result = [];\n        eachfn(arr, function (x, index, cb) {\n            fn(x, function (err, y) {\n                result = result.concat(y || []);\n                cb(err);\n            });\n        }, function (err) {\n            callback(err, result);\n        });\n    }\n    async.concat = doParallel(_concat);\n    async.concatSeries = doSeries(_concat);\n\n    async.whilst = function (test, iterator, callback) {\n        callback = callback || noop;\n        if (test()) {\n            var next = _restParam(function(err, args) {\n                if (err) {\n                    callback(err);\n                } else if (test.apply(this, args)) {\n                    iterator(next);\n                } else {\n                    callback.apply(null, [null].concat(args));\n                }\n            });\n            iterator(next);\n        } else {\n            callback(null);\n        }\n    };\n\n    async.doWhilst = function (iterator, test, callback) {\n        var calls = 0;\n        return async.whilst(function() {\n            return ++calls <= 1 || test.apply(this, arguments);\n        }, iterator, callback);\n    };\n\n    async.until = function (test, iterator, callback) {\n        return async.whilst(function() {\n            return !test.apply(this, arguments);\n        }, iterator, callback);\n    };\n\n    async.doUntil = function (iterator, test, callback) {\n        return async.doWhilst(iterator, function() {\n            return !test.apply(this, arguments);\n        }, callback);\n    };\n\n    async.during = function (test, iterator, callback) {\n        callback = callback || noop;\n\n        var next = _restParam(function(err, args) {\n            if (err) {\n                callback(err);\n            } else {\n                args.push(check);\n                test.apply(this, args);\n            }\n        });\n\n        var check = function(err, truth) {\n            if (err) {\n                callback(err);\n            } else if (truth) {\n                iterator(next);\n            } else {\n                callback(null);\n            }\n        };\n\n        test(check);\n    };\n\n    async.doDuring = function (iterator, test, callback) {\n        var calls = 0;\n        async.during(function(next) {\n            if (calls++ < 1) {\n                next(null, true);\n            } else {\n                test.apply(this, arguments);\n            }\n        }, iterator, callback);\n    };\n\n    function _queue(worker, concurrency, payload) {\n        if (concurrency == null) {\n            concurrency = 1;\n        }\n        else if(concurrency === 0) {\n            throw new Error('Concurrency must not be zero');\n        }\n        function _insert(q, data, pos, callback) {\n            if (callback != null && typeof callback !== \"function\") {\n                throw new Error(\"task callback must be a function\");\n            }\n            q.started = true;\n            if (!_isArray(data)) {\n                data = [data];\n            }\n            if(data.length === 0 && q.idle()) {\n                // call drain immediately if there are no tasks\n                return async.setImmediate(function() {\n                    q.drain();\n                });\n            }\n            _arrayEach(data, function(task) {\n                var item = {\n                    data: task,\n                    callback: callback || noop\n                };\n\n                if (pos) {\n                    q.tasks.unshift(item);\n                } else {\n                    q.tasks.push(item);\n                }\n\n                if (q.tasks.length === q.concurrency) {\n                    q.saturated();\n                }\n            });\n            async.setImmediate(q.process);\n        }\n        function _next(q, tasks) {\n            return function(){\n                workers -= 1;\n\n                var removed = false;\n                var args = arguments;\n                _arrayEach(tasks, function (task) {\n                    _arrayEach(workersList, function (worker, index) {\n                        if (worker === task && !removed) {\n                            workersList.splice(index, 1);\n                            removed = true;\n                        }\n                    });\n\n                    task.callback.apply(task, args);\n                });\n                if (q.tasks.length + workers === 0) {\n                    q.drain();\n                }\n                q.process();\n            };\n        }\n\n        var workers = 0;\n        var workersList = [];\n        var q = {\n            tasks: [],\n            concurrency: concurrency,\n            payload: payload,\n            saturated: noop,\n            empty: noop,\n            drain: noop,\n            started: false,\n            paused: false,\n            push: function (data, callback) {\n                _insert(q, data, false, callback);\n            },\n            kill: function () {\n                q.drain = noop;\n                q.tasks = [];\n            },\n            unshift: function (data, callback) {\n                _insert(q, data, true, callback);\n            },\n            process: function () {\n                while(!q.paused && workers < q.concurrency && q.tasks.length){\n\n                    var tasks = q.payload ?\n                        q.tasks.splice(0, q.payload) :\n                        q.tasks.splice(0, q.tasks.length);\n\n                    var data = _map(tasks, function (task) {\n                        return task.data;\n                    });\n\n                    if (q.tasks.length === 0) {\n                        q.empty();\n                    }\n                    workers += 1;\n                    workersList.push(tasks[0]);\n                    var cb = only_once(_next(q, tasks));\n                    worker(data, cb);\n                }\n            },\n            length: function () {\n                return q.tasks.length;\n            },\n            running: function () {\n                return workers;\n            },\n            workersList: function () {\n                return workersList;\n            },\n            idle: function() {\n                return q.tasks.length + workers === 0;\n            },\n            pause: function () {\n                q.paused = true;\n            },\n            resume: function () {\n                if (q.paused === false) { return; }\n                q.paused = false;\n                var resumeCount = Math.min(q.concurrency, q.tasks.length);\n                // Need to call q.process once per concurrent\n                // worker to preserve full concurrency after pause\n                for (var w = 1; w <= resumeCount; w++) {\n                    async.setImmediate(q.process);\n                }\n            }\n        };\n        return q;\n    }\n\n    async.queue = function (worker, concurrency) {\n        var q = _queue(function (items, cb) {\n            worker(items[0], cb);\n        }, concurrency, 1);\n\n        return q;\n    };\n\n    async.priorityQueue = function (worker, concurrency) {\n\n        function _compareTasks(a, b){\n            return a.priority - b.priority;\n        }\n\n        function _binarySearch(sequence, item, compare) {\n            var beg = -1,\n                end = sequence.length - 1;\n            while (beg < end) {\n                var mid = beg + ((end - beg + 1) >>> 1);\n                if (compare(item, sequence[mid]) >= 0) {\n                    beg = mid;\n                } else {\n                    end = mid - 1;\n                }\n            }\n            return beg;\n        }\n\n        function _insert(q, data, priority, callback) {\n            if (callback != null && typeof callback !== \"function\") {\n                throw new Error(\"task callback must be a function\");\n            }\n            q.started = true;\n            if (!_isArray(data)) {\n                data = [data];\n            }\n            if(data.length === 0) {\n                // call drain immediately if there are no tasks\n                return async.setImmediate(function() {\n                    q.drain();\n                });\n            }\n            _arrayEach(data, function(task) {\n                var item = {\n                    data: task,\n                    priority: priority,\n                    callback: typeof callback === 'function' ? callback : noop\n                };\n\n                q.tasks.splice(_binarySearch(q.tasks, item, _compareTasks) + 1, 0, item);\n\n                if (q.tasks.length === q.concurrency) {\n                    q.saturated();\n                }\n                async.setImmediate(q.process);\n            });\n        }\n\n        // Start with a normal queue\n        var q = async.queue(worker, concurrency);\n\n        // Override push to accept second parameter representing priority\n        q.push = function (data, priority, callback) {\n            _insert(q, data, priority, callback);\n        };\n\n        // Remove unshift function\n        delete q.unshift;\n\n        return q;\n    };\n\n    async.cargo = function (worker, payload) {\n        return _queue(worker, 1, payload);\n    };\n\n    function _console_fn(name) {\n        return _restParam(function (fn, args) {\n            fn.apply(null, args.concat([_restParam(function (err, args) {\n                if (typeof console === 'object') {\n                    if (err) {\n                        if (console.error) {\n                            console.error(err);\n                        }\n                    }\n                    else if (console[name]) {\n                        _arrayEach(args, function (x) {\n                            console[name](x);\n                        });\n                    }\n                }\n            })]));\n        });\n    }\n    async.log = _console_fn('log');\n    async.dir = _console_fn('dir');\n    /*async.info = _console_fn('info');\n    async.warn = _console_fn('warn');\n    async.error = _console_fn('error');*/\n\n    async.memoize = function (fn, hasher) {\n        var memo = {};\n        var queues = {};\n        var has = Object.prototype.hasOwnProperty;\n        hasher = hasher || identity;\n        var memoized = _restParam(function memoized(args) {\n            var callback = args.pop();\n            var key = hasher.apply(null, args);\n            if (has.call(memo, key)) {   \n                async.setImmediate(function () {\n                    callback.apply(null, memo[key]);\n                });\n            }\n            else if (has.call(queues, key)) {\n                queues[key].push(callback);\n            }\n            else {\n                queues[key] = [callback];\n                fn.apply(null, args.concat([_restParam(function (args) {\n                    memo[key] = args;\n                    var q = queues[key];\n                    delete queues[key];\n                    for (var i = 0, l = q.length; i < l; i++) {\n                        q[i].apply(null, args);\n                    }\n                })]));\n            }\n        });\n        memoized.memo = memo;\n        memoized.unmemoized = fn;\n        return memoized;\n    };\n\n    async.unmemoize = function (fn) {\n        return function () {\n            return (fn.unmemoized || fn).apply(null, arguments);\n        };\n    };\n\n    function _times(mapper) {\n        return function (count, iterator, callback) {\n            mapper(_range(count), iterator, callback);\n        };\n    }\n\n    async.times = _times(async.map);\n    async.timesSeries = _times(async.mapSeries);\n    async.timesLimit = function (count, limit, iterator, callback) {\n        return async.mapLimit(_range(count), limit, iterator, callback);\n    };\n\n    async.seq = function (/* functions... */) {\n        var fns = arguments;\n        return _restParam(function (args) {\n            var that = this;\n\n            var callback = args[args.length - 1];\n            if (typeof callback == 'function') {\n                args.pop();\n            } else {\n                callback = noop;\n            }\n\n            async.reduce(fns, args, function (newargs, fn, cb) {\n                fn.apply(that, newargs.concat([_restParam(function (err, nextargs) {\n                    cb(err, nextargs);\n                })]));\n            },\n            function (err, results) {\n                callback.apply(that, [err].concat(results));\n            });\n        });\n    };\n\n    async.compose = function (/* functions... */) {\n        return async.seq.apply(null, Array.prototype.reverse.call(arguments));\n    };\n\n\n    function _applyEach(eachfn) {\n        return _restParam(function(fns, args) {\n            var go = _restParam(function(args) {\n                var that = this;\n                var callback = args.pop();\n                return eachfn(fns, function (fn, _, cb) {\n                    fn.apply(that, args.concat([cb]));\n                },\n                callback);\n            });\n            if (args.length) {\n                return go.apply(this, args);\n            }\n            else {\n                return go;\n            }\n        });\n    }\n\n    async.applyEach = _applyEach(async.eachOf);\n    async.applyEachSeries = _applyEach(async.eachOfSeries);\n\n\n    async.forever = function (fn, callback) {\n        var done = only_once(callback || noop);\n        var task = ensureAsync(fn);\n        function next(err) {\n            if (err) {\n                return done(err);\n            }\n            task(next);\n        }\n        next();\n    };\n\n    function ensureAsync(fn) {\n        return _restParam(function (args) {\n            var callback = args.pop();\n            args.push(function () {\n                var innerArgs = arguments;\n                if (sync) {\n                    async.setImmediate(function () {\n                        callback.apply(null, innerArgs);\n                    });\n                } else {\n                    callback.apply(null, innerArgs);\n                }\n            });\n            var sync = true;\n            fn.apply(this, args);\n            sync = false;\n        });\n    }\n\n    async.ensureAsync = ensureAsync;\n\n    async.constant = _restParam(function(values) {\n        var args = [null].concat(values);\n        return function (callback) {\n            return callback.apply(this, args);\n        };\n    });\n\n    async.wrapSync =\n    async.asyncify = function asyncify(func) {\n        return _restParam(function (args) {\n            var callback = args.pop();\n            var result;\n            try {\n                result = func.apply(this, args);\n            } catch (e) {\n                return callback(e);\n            }\n            // if result is Promise object\n            if (_isObject(result) && typeof result.then === \"function\") {\n                result.then(function(value) {\n                    callback(null, value);\n                })[\"catch\"](function(err) {\n                    callback(err.message ? err : new Error(err));\n                });\n            } else {\n                callback(null, result);\n            }\n        });\n    };\n\n    // Node.js\n    if (typeof module === 'object' && module.exports) {\n        module.exports = async;\n    }\n    // AMD / RequireJS\n    else if (typeof define === 'function' && define.amd) {\n        define([], function () {\n            return async;\n        });\n    }\n    // included directly via <script> tag\n    else {\n        root.async = async;\n    }\n\n}());\n","exports.load = function(url, type, callback) {\n\tvar xhr = new XMLHttpRequest();\n\n\txhr.onreadystatechange = function() {\n\t\tif (xhr.readyState !== 4) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (xhr.status >= 200 && xhr.status < 300) {\n\t\t\tvar arrayBuffer = xhr.response;\n\t\t\tif (arrayBuffer) {\n\t\t\t\ttry{\n\n\t\t\t\t\t// parse according to type\n\t\t\t\t\tvar data = new type(arrayBuffer);\n\n\t\t\t\t\t// return result\n\t\t\t\t\treturn callback(null, data);\n\t\t\t\t} catch (e){\n\t\t\t\t\treturn callback(e);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\treturn callback(\"empty response\");\n\t\t\t}\n\n\t\t} else {\n\t\t\tvar err = new Error(\"failed to request file '\" + url + \"'\");\n\t\t\t// follow Node.js error signature\n\t\t\terr.errno = 34;\n\t\t\tcallback(err);\n\t\t}\n\t};\n\n\ttry {\n\t\txhr.open('GET', url, true);\n\t\txhr.responseType = \"arraybuffer\";\n\t\txhr.send(null);\n\t} catch (err) {\n\t\tcallback(err);\n\t}\n};\n","\n/*\nCopyright (c) 2015 Waylon Flinn\n\nwebgl.js\n\nmultiply matrices up to 4096 x 4096 on GPUs that support OES_texture_float\nextension. input is encoded into the red and green channels of an input texture and\ncalculations are done using a custom fragment shader.\n\n*/\n\n\n/*\n\tA WebGL context associated with a specific canvas element.\n\n\t* creates a canvas\n\t* sets up webgl context\n\t* translates numbers into textures\n\t* compiles shader programs for executing math (when supplied with an\n\t\toperation specific fragment shader)\n */\nfunction WebGL(options) {\n\n\tvar glOptions,\n\t\text;\n\n\toptions = options || {};\n\n\t// canvas\n\tif(typeof options.canvas === 'undefined')\n\t\tthis.canvas = document.createElement('canvas');\n\telse\n\t\tthis.canvas = options.canvas;\n\n\t// context\n\tglOptions = { premultipliedAlpha: false, preserveDrawingBuffer: false };\n\tthis.context = this.canvas.getContext(\"experimental-webgl\", glOptions);\n\n\tif (typeof this.context === 'undefined')\n\t\tthrow new Error(\"No support for Webgl.\");\n\n\t// float texture extension\n\ttry {\n\t\text = this.context.getExtension('OES_texture_float');\n\t} catch(e) {\n\n\t}\n\tif ( !ext ) {\n\t\tconsole.log(\"No support for OES_texture_float extension.\");\n\t\tthis.hasFloat = false;\n\t} else {\n\t\tthis.hasFloat = true;\n\t}\n\n\tvar highp = this.context.getShaderPrecisionFormat(this.context.FRAGMENT_SHADER, this.context.HIGH_FLOAT);\n\tthis.hasHighPrecision = highp.precision != 0;\n\tif(this.hasHighPrecision) this.highp = highp;\n\n\t// create pass through vertex shader\n\tvar passThrough = \"// vertex shader for a single quad\\n// work is performed in the operation specific texture shader\\n\\nprecision highp float;\\n#define GLSLIFY 1\\n\\nattribute vec3 pos;\\nattribute vec2 tex;\\nvarying vec2   outTex;\\nvoid main(void)\\n{\\n\\t// just pass the position and texture coords\\n\\tgl_Position = vec4(pos, 1.0);\\n\\toutTex = tex;\\n}\\n\";\n\tthis.vertexShader = this.context.createShader(this.context.VERTEX_SHADER);\n\tthis.context.shaderSource(this.vertexShader, passThrough);\n\tthis.context.compileShader(this.vertexShader);\n\n\tvar encode = \"\\nprecision highp float;\\n#define GLSLIFY 1\\n\\nvarying vec2      outTex;\\t// texture coords of row/column to calculate\\nuniform sampler2D A;\\t\\t// texture with data from padded A\\nuniform int       N;\\t\\t// number of columns in output\\nuniform int       pad;\\t\\t//\\n\\n// Render float to bytes according to IEEE 754 Floating Point\\nvec4 encode_float_1540259130(float val) {\\n\\n\\t// TODO: correctly handle denormal numbers\\n\\t// http://www.2ality.com/2012/04/number-encoding.html\\n\\tfloat a = abs(val);                           // encode absolute value + sign\\n\\tfloat exp = floor(log2(a));                 // number of powers of 2\\n\\tfloat mant = pow(2.,log2(a)-exp) * pow(2.,23.);  // multiply to fill 24 bits (implied leading 1)\\n\\tfloat mant1 = floor(mant / 256. / 256.);    // first 8 bits of mantissa\\n\\tfloat mant2 = mod(floor(mant / 256.),256.); // second 8 bits\\n\\tfloat mant3 = mod(mant,256.);               // third 8 bits\\n\\n\\thighp float sign = 128.-128.*(a/val);\\t\\t\\t// sign bit is 256 or 0\\n\\thighp float e = (sign+exp+127.)/510.;\\t\\t// exponent and sign\\n\\thighp float m1 = (mant1-(128.*(1.-mod(exp+127.,2.))))/255.; // handle leading bit\\n\\thighp float m2 = (mant2)/255.;\\t\\t\\t\\t// middle part\\n\\thighp float m3 = (mant3+.5)/255.;\\t\\t\\t// scale to 0 - 255\\n\\n\\treturn vec4(m3,m2,m1,e);\\n}\\n\\n// select an element from a vector based on index\\nfloat select_index_1604150559(vec4 v, int index){\\n\\tfloat val;\\n\\tif (index == 0) {\\n\\t\\tval = v.r;\\n\\t} else if(index == 1) {\\n\\t\\tval = v.g;\\n\\t} else if(index == 2) {\\n\\t\\tval = v.b;\\n\\t} else if(index == 3){\\n\\t\\tval = v.a;\\n\\t} else {\\n\\t\\t// should never be here\\n\\t\\tval = 0.0;\\n\\t}\\n\\n\\treturn val;\\n}\\n\\nvoid main(void) {\\n\\n\\t// get the implied row and column from .y and .x of passed (output)\\n\\t// texture coordinate. These map directly to input texture space when\\n\\t// the relevant dimensions are the same.\\n\\tfloat row_t = outTex.y;\\n\\tfloat col_t = outTex.x;\\n\\n\\tvec4 val_v = texture2D(A, vec2(col_t * float(N)/float(N + pad), row_t));\\n\\tint channel = int(mod(col_t * float(N), 4.0 ));\\n\\tfloat val = select_index_1604150559(val_v, channel);\\n\\n\\tif (val == 0.) {\\n\\t\\tgl_FragColor = vec4(0.,0.,0.,0.);\\n\\t\\treturn;\\n\\t}\\n\\n \\t// output vec4 with bytes for an IEEE754 32-bit floating point number\\n\\tgl_FragColor = encode_float_1540259130(val);\\n}\\n\",\n\t\ttranspose = \"\\nprecision highp float;\\n#define GLSLIFY 1\\n\\nvarying vec2      outTex;\\t// texture coords of row/column to calculate\\nuniform sampler2D A;\\t\\t// texture with data from padded A\\nuniform int       M;\\t\\t// number of rows in output\\nuniform int       N;\\t\\t// number of columns in output\\nuniform int       mpad;\\t\\t//\\nuniform int       npad;\\t\\t//\\n\\n// select an element from a vector based on index\\nfloat select_index_1540259130(vec4 v, int index){\\n\\tfloat val;\\n\\tif (index == 0) {\\n\\t\\tval = v.r;\\n\\t} else if(index == 1) {\\n\\t\\tval = v.g;\\n\\t} else if(index == 2) {\\n\\t\\tval = v.b;\\n\\t} else if(index == 3){\\n\\t\\tval = v.a;\\n\\t} else {\\n\\t\\t// should never be here\\n\\t\\tval = 0.0;\\n\\t}\\n\\n\\treturn val;\\n}\\n\\nvoid main(void) {\\n\\n\\t// get the implied row and column from .y and .x of passed (output)\\n\\t// texture coordinate. These map directly to input texture space when\\n\\t// the relevant dimensions are the same.\\n\\tfloat row_t = outTex.y;\\n\\tfloat col_t = outTex.x;\\n\\tfloat col = (col_t * float(N + npad) - 2.0); // index of first element in pixel (matrix space)\\n\\n\\t// get rows in the input, each containing one element in the output\\n\\tvec4 row_1 = texture2D(A, vec2((row_t * float(M))/float(M + mpad), (col + 0.5)/float(N)));\\n\\tvec4 row_2 = texture2D(A, vec2((row_t * float(M))/float(M + mpad), (col + 1.5)/float(N)));\\n\\tvec4 row_3 = texture2D(A, vec2((row_t * float(M))/float(M + mpad), (col + 2.5)/float(N)));\\n\\tvec4 row_4 = texture2D(A, vec2((row_t * float(M))/float(M + mpad), (col + 3.5)/float(N)));\\n\\n\\t// package into output vector\\n\\tint channel = int(mod(row_t * float(M), 4.0 ));\\n\\n\\tvec4 col_v = vec4(0.0, 0.0, 0.0, 0.0); // vec4 representing four elements in a column in the input\\n\\n\\t// extract relevent element from each input row\\n\\tcol_v.r = select_index_1540259130(row_1, channel);\\n\\tif(npad > 0 && (col + 4.0) > float(N) ) {\\n\\t\\t// compute elements in padded region\\n\\t\\tif(npad < 3){\\n\\t\\t\\tcol_v.g = select_index_1540259130(row_2, channel);\\n\\t\\t}\\n\\t\\tif(npad < 2){\\n\\t\\t\\tcol_v.b = select_index_1540259130(row_3, channel);\\n\\t\\t}\\n\\t} else {\\n\\t\\tcol_v.g = select_index_1540259130(row_2, channel);\\n\\t\\tcol_v.b = select_index_1540259130(row_3, channel);\\n\\t\\tcol_v.a = select_index_1540259130(row_4, channel);\\n\\t}\\n\\n\\tgl_FragColor = col_v;\\n}\\n\",\n\t\treshape = \"\\nprecision highp float;\\n#define GLSLIFY 1\\n\\nvarying vec2      outTex;\\t// texture coords of row/column to calculate\\nuniform sampler2D A;\\t\\t// texture with data from padded A\\nuniform float     M;\\t\\t// number of rows in output\\nuniform float     N;\\t\\t// number of columns in output\\nuniform float     pad;\\t\\t// column padding in output\\nuniform float     M_in;\\t\\t// number of rows in input\\nuniform float     N_in;\\t\\t// number of columns in input\\nuniform float     pad_in;\\t// column padding in input\\n\\n/* number of input pixels\\n   origin index (channel) for each\\n   termination index (channel) for each\\n   destination origin index (channel) for each\\n */\\n// select an element from a vector based on index\\nfloat select_index_1540259130(vec4 v, int index){\\n\\tfloat val;\\n\\tif (index == 0) {\\n\\t\\tval = v.r;\\n\\t} else if(index == 1) {\\n\\t\\tval = v.g;\\n\\t} else if(index == 2) {\\n\\t\\tval = v.b;\\n\\t} else if(index == 3){\\n\\t\\tval = v.a;\\n\\t} else {\\n\\t\\t// should never be here\\n\\t\\tval = 0.0;\\n\\t}\\n\\n\\treturn val;\\n}\\n\\n// set pad values to 0.0, if in padded region of output texture\\nvoid fix_pad_1604150559(inout vec4 v, int pad){\\n\\tv.a = 0.0;\\n\\tif(pad == 2){\\n\\t\\tv.b = 0.0;\\n\\t} else if(pad == 3){\\n\\t\\tv.b = 0.0;\\n\\t\\tv.g = 0.0;\\n\\t}\\n}\\n\\n// translate a linear index into x, y coordinates for a matrix\\nvec2 linear_index_coords_1117569599(float linear_index, float row_length){\\n\\tvec2 coords;\\n\\n\\tcoords.x = floor(mod(linear_index + 0.5, row_length)); // column\\n\\tcoords.y = floor((linear_index + 0.5) / row_length); // row\\n\\n\\treturn coords;\\n}\\n\\nvoid main(void) {\\n\\n\\t// get the implied row and column from .y and .x of passed (output)\\n\\t// texture coordinate. These map directly to input texture space when\\n\\t// the relevant dimensions are the same.\\n\\tfloat row_t = outTex.y;\\n\\tfloat col_t = outTex.x;\\n\\n\\tfloat row = floor(row_t * M);\\n\\tfloat col_0 = (col_t * (N + pad) - 2.0); // index of first element in pixel (matrix space)\\n\\t//float col_0 = floor(col_t * (N + pad)/4.0)*4.0; // index of first element in pixel (matrix space)\\n\\tfloat lin_index_0 = row * N + col_0; // linearized index of first element in pixel in output\\n\\n\\tvec4 pixel_in = vec4(0.0, 0.0, 0.0, 0.0);\\n\\tvec4 result = vec4(0.0, 0.0, 0.0, 0.0);\\n\\tvec2 coords = linear_index_coords_1117569599(lin_index_0, N_in);\\n\\tvec2 ncoords;\\n\\tint channel_in = int(mod(coords.x, 4.0));\\n\\n\\tvec2 scale_in = vec2(1.0/(N_in + pad_in), 1.0/M_in); // scale from matrix to input texture coords\\n\\tvec2 offset_in = vec2(0.5, 0.5); // move away from edge of pixel\\n\\tconst vec2 pixel_scale = vec2(1.0/4.0, 1.0); // scale from matrix to pixel coords\\n\\n\\tpixel_in = texture2D(A, (coords + offset_in) * scale_in);\\n\\n\\t// go through channels for current output pixel\\n\\tfor(int channel = 0; channel < 4; channel++){\\n\\n\\t\\t// are we on a new input pixel?\\n\\t\\tncoords = linear_index_coords_1117569599(lin_index_0 + float(channel), N_in);\\n\\t\\tif(floor(ncoords * pixel_scale) != floor(coords * pixel_scale)){\\n\\t\\t\\tcoords = ncoords;\\n\\t\\t\\tpixel_in = texture2D(A, (coords + offset_in) * scale_in);\\n\\t\\t\\tchannel_in = 0;\\n\\t\\t}\\n\\n\\t\\tif(channel == 0){\\n\\t\\t\\tresult.r = select_index_1540259130(pixel_in, channel_in);\\n\\t\\t} else if(channel == 1){\\n\\t\\t\\tresult.g = select_index_1540259130(pixel_in, channel_in);\\n\\t\\t} else if(channel == 2){\\n\\t\\t\\tresult.b = select_index_1540259130(pixel_in, channel_in);\\n\\t\\t} else {\\n\\t\\t\\tresult.a = select_index_1540259130(pixel_in, channel_in);\\n\\t\\t}\\n\\n\\t\\tchannel_in++;\\n\\t}\\n\\n\\t// are we in the padded (output) region?\\n\\tif(pad > 0.0 && col_0 + 3.5 > N ) {\\n\\t\\tfix_pad_1604150559(result, int(pad));\\n\\t}\\n\\n\\tgl_FragColor = result;\\n}\\n\",\n\t\treshape_simple = \"\\nprecision highp float;\\n#define GLSLIFY 1\\n\\nvarying vec2      outTex;\\t// texture coords of row/column to calculate\\nuniform sampler2D A;\\t\\t// texture with data from padded A\\nuniform float     M;\\t\\t// number of rows in output\\nuniform float     N;\\t\\t// number of columns in output\\nuniform float     M_in;\\t\\t// number of rows in input\\nuniform float     N_in;\\t\\t// number of columns in input\\n\\n// translate a linear index into x, y coordinates for a matrix\\nvec2 linear_index_coords_1540259130(float linear_index, float row_length){\\n\\tvec2 coords;\\n\\n\\tcoords.x = floor(mod(linear_index + 0.5, row_length)); // column\\n\\tcoords.y = floor((linear_index + 0.5) / row_length); // row\\n\\n\\treturn coords;\\n}\\n\\nvoid main(void) {\\n\\n\\t// get the implied row and column from .y and .x of passed (output)\\n\\t// texture coordinate. These map directly to input texture space when\\n\\t// the relevant dimensions are the same.\\n\\tfloat row_t = outTex.y;\\n\\tfloat col_t = outTex.x;\\n\\n\\tfloat row = floor(row_t * M);\\n\\tfloat col_0 = floor(col_t * N - 1.5); // index of first element in pixel (matrix space)\\n\\tfloat lin_index_0 = row * N + col_0; // linearized index of first element in pixel in output\\n\\n\\tvec4 result;\\n\\tvec2 coords = linear_index_coords_1540259130(lin_index_0, N_in);\\n\\n\\tvec2 scale_in = vec2(1.0/N_in, 1.0/M_in); // scale from matrix to input texture coords\\n\\tvec2 offset_in = vec2(0.5, 0.5); // move away from edge of pixel\\n\\n\\tresult = texture2D(A, (coords + offset_in) * scale_in);\\n\\n\\tgl_FragColor = result;\\n}\\n\",\n\t\tsubmatrix = \"precision highp float;\\n#define GLSLIFY 1\\n\\nvarying vec2      outTex;\\t// texture coords of row/column to calculate\\nuniform sampler2D X;\\t\\t// texture with data from padded X\\nuniform float     N;\\t\\t// number of columns\\nuniform float     pad;\\t\\t// additional columns to nearest multiple of four\\nuniform float     N_in;\\t\\t// number of columns (input)\\nuniform float     pad_in;\\t// additional columns to nearest multiple of four (input)\\nuniform float     stride;\\nuniform float     offset;   // zero or one\\n\\n// set pad values to 0.0, if in padded region of output texture\\nvoid fix_pad_1540259130(inout vec4 v, int pad){\\n\\tv.a = 0.0;\\n\\tif(pad == 2){\\n\\t\\tv.b = 0.0;\\n\\t} else if(pad == 3){\\n\\t\\tv.b = 0.0;\\n\\t\\tv.g = 0.0;\\n\\t}\\n}\\n\\n/* join parts of two pixels into one, selecting four continguous elements\\n  starting at channel.\\n*/\\nvoid join_pixels_1604150559(inout vec4 x, vec4 x0, vec4 x1, float channel){\\n\\tif(channel == 1.0){\\n\\t\\tx.rgb = x0.gba;\\n\\t\\tx.a = x1.r;\\n\\t} else if(channel == 2.0){\\n\\t\\tx.rg = x0.ba;\\n\\t\\tx.ba = x1.rg;\\n\\t} else if(channel == 3.0){\\n\\t\\tx.r = x0.a;\\n\\t\\tx.gba = x1.rgb;\\n\\t}\\n}\\n\\nvoid main(void) {\\n\\n\\t// get the implied row and column from .y and .x of passed (output)\\n\\t// texture coordinate. These map directly to input texture space when\\n\\t// the relevant dimensions are the same.\\n\\tfloat row_t = outTex.y;\\n\\tfloat col_t = outTex.x;\\n\\tfloat col = floor(col_t * (N + pad) - 1.5); // index of first element in pixel (output matrix space)\\n\\n\\tfloat stripe = floor(col / stride);\\n\\tfloat sub_col = floor(mod(col, stride));\\n\\n\\tfloat col_in = (offset + (2.0 * stripe)) * stride + sub_col;\\n\\n\\tvec4 x;\\n\\tfloat channel = mod(col_in, 4.0); // channel in the input of first element in output\\n\\n\\t// are we at the beggining of an input pixel?\\n\\tif(channel == 0.0){\\n\\t\\t// yes, select the whole thing\\n\\t\\tx = texture2D( X, vec2((col_in + 2.0 - channel) / (N_in + pad_in) , row_t));\\n\\t} else {\\n\\t\\t// no, select parts from two pixels\\n\\t\\tvec4 x0, x1;\\n\\t\\tx0 = texture2D( X, vec2((col_in + 2.0 - channel) / (N_in + pad_in) , row_t));\\n\\t\\tx1 = texture2D( X, vec2((col_in + 6.0 - channel) / (N_in + pad_in) , row_t));\\n\\n\\t\\tjoin_pixels_1604150559(x, x0, x1, channel);\\n\\n\\t}\\n\\n\\t// fix padded region\\n\\tif(pad > 0.0 && col + 4.0 > N ) {\\n\\t\\tfix_pad_1540259130(x, int(pad));\\n\\t}\\n\\n\\tgl_FragColor = x;\\n}\\n\",\n\t\tcombine = \"precision highp float;\\n#define GLSLIFY 1\\n\\nvarying vec2      outTex;\\t// texture coords of row/column to calculate\\nuniform sampler2D A;\\t\\t// texture with data from padded A\\nuniform sampler2D B;\\t\\t// texture with data from padded B\\nuniform float     N_in;\\t\\t// number of columns\\nuniform float     pad_in;\\t// additional columns to nearest multiple of four\\nuniform float     stride;\\n\\n// set pad values to 0.0, if in padded region of output texture\\nvoid fix_pad_1540259130(inout vec4 v, int pad){\\n\\tv.a = 0.0;\\n\\tif(pad == 2){\\n\\t\\tv.b = 0.0;\\n\\t} else if(pad == 3){\\n\\t\\tv.b = 0.0;\\n\\t\\tv.g = 0.0;\\n\\t}\\n}\\n\\nvoid main(void) {\\n\\n\\t// get the implied row and column from .y and .x of passed (output)\\n\\t// texture coordinate. These map directly to input texture space when\\n\\t// the relevant dimensions are the same.\\n\\tfloat row_t = outTex.y;\\n\\tfloat col_t = outTex.x;\\n\\tfloat N = N_in * 2.0;\\n\\tfloat pad = mod(N, 4.0);\\n\\tfloat col = floor(col_t * (N + pad) - 1.5); // index of first element in pixel (output matrix space)\\n\\n\\tfloat stripe = floor(col / stride);\\n\\tfloat sub_col = floor(mod(col, stride));\\n\\n\\tfloat tex_select = mod(stripe, 2.0);\\n\\tfloat col_in = floor(stripe / 2.0) * stride + sub_col;\\n\\n\\tvec4 x;\\n\\tfloat channel = mod(col_in, 4.0); // channel in the input of first element in output\\n\\n\\t// which input texture are we getting this pixel from?\\n\\tif(tex_select == 0.0){\\n\\t\\tx = texture2D( A, vec2((col_in + 2.0) / (N_in + pad_in) , row_t));\\n\\t} else {\\n\\t\\tx = texture2D( B, vec2((col_in + 2.0) / (N_in + pad_in) , row_t));\\n\\t}\\n\\n\\t// fix padded region\\n\\tif(pad > 0.0 && col + 4.0 > N ) {\\n\\t\\tfix_pad_1540259130(x, int(pad));\\n\\t}\\n\\n\\tgl_FragColor = x;\\n}\\n\";\n\n\tthis.encode_program = this.createProgram(encode);\n\tthis.transpose_program = this.createProgram(transpose);\n\tthis.reshape_program = this.createProgram(reshape);\n\tthis.reshape_simple_program = this.createProgram(reshape_simple);\n\tthis.submatrix_program = this.createProgram(submatrix);\n\tthis.combine_program = this.createProgram(combine);\n};\n\nmodule.exports = WebGL;\n\n// RGBA is the standard input/ouput texture\nWebGL.COMPONENTS_PER_TEXEL = 4;\n\nWebGL.POSITION_UNIFORM_NAME = \"pos\";\nWebGL.TEXTURE_UNIFORM_NAME = \"tex\";\n\n\nWebGL.prototype.encode = function(M, N, texture0, out){\n\n\tthis.program = this.encode_program;\n\tthis.selectProgram(this.program);\n\n\tvar pad = this.getPad(N);\n\n\tvar N_gl = this.context.getUniformLocation(this.program, \"N\"),\n\t\tpad_gl = this.context.getUniformLocation(this.program, \"pad\");\n\n\tthis.context.uniform1i(N_gl, N);\n\tthis.context.uniform1i(pad_gl, pad);\n\n\tthis.bindInputTexture(texture0, this.context.TEXTURE0, \"A\");\n\n\tthis.bindOutputTexture(M, N, out);\n\n\tthis.context.drawElements(this.context.TRIANGLES, /*num items*/6, this.context.UNSIGNED_SHORT, 0);\n\n\tthis.unbindInputTexture(this.context.TEXTURE0);\n}\n\n/* tranpose a texture where input has M rows and N columns\n */\nWebGL.prototype.transpose = function(M, N, texture0, out){\n\n\tthis.program = this.transpose_program;\n\tthis.selectProgram(this.program);\n\n\tvar npad = this.getPad(N),\n\t\tmpad = this.getPad(M);\n\n\t// in the shader M and N describe rows and columns in the *output*, respectively\n\tvar N_gl = this.context.getUniformLocation(this.program, \"N\"),\n\t\tnpad_gl = this.context.getUniformLocation(this.program, \"npad\"),\n\t\tM_gl = this.context.getUniformLocation(this.program, \"M\"),\n\t\tmpad_gl = this.context.getUniformLocation(this.program, \"mpad\");\n\n\tthis.context.uniform1i(N_gl, M);\n\tthis.context.uniform1i(npad_gl, mpad);\n\tthis.context.uniform1i(M_gl, N);\n\tthis.context.uniform1i(mpad_gl, npad);\n\n\tthis.bindInputTexture(texture0, this.context.TEXTURE0, \"A\");\n\n\tthis.bindOutputTexture(N, (M + mpad)/4, out);\n\n\tthis.context.drawElements(this.context.TRIANGLES, /*num items*/6, this.context.UNSIGNED_SHORT, 0);\n\n\tthis.unbindInputTexture(this.context.TEXTURE0);\n};\n\n/* tranpose a texture where input has M rows and N columns\n */\nWebGL.prototype.reshape = function(M, N, M_out, N_out, texture0, out){\n\n\tvar pad = this.getPad(N),\n\t\tpad_out = this.getPad(N_out);\n\n\tif(pad == 0 && pad_out == 0){\n\t\tthis.program = this.reshape_simple_program;\n\t} else {\n\t\tthis.program = this.reshape_program;\n\t\tconsole.log(\"# WARNING: using slow reshape shader.\");\n\t}\n\n\tthis.selectProgram(this.program);\n\n\n\t// in the shader M and N describe rows and columns in the *output*, respectively\n\tvar M_gl = this.context.getUniformLocation(this.program, \"M\"),\n\t\tN_gl = this.context.getUniformLocation(this.program, \"N\"),\n\t\tpad_gl = this.context.getUniformLocation(this.program, \"pad\"),\n\t\tM_in_gl = this.context.getUniformLocation(this.program, \"M_in\"),\n\t\tN_in_gl = this.context.getUniformLocation(this.program, \"N_in\"),\n\t\tpad_in_gl = this.context.getUniformLocation(this.program, \"pad_in\");\n\n\tthis.context.uniform1f(M_gl, M_out);\n\tthis.context.uniform1f(N_gl, N_out);\n\tthis.context.uniform1f(pad_gl, pad_out);\n\tthis.context.uniform1f(M_in_gl, M);\n\tthis.context.uniform1f(N_in_gl, N);\n\tthis.context.uniform1f(pad_in_gl, pad);\n\n\tthis.bindInputTexture(texture0, this.context.TEXTURE0, \"A\");\n\n\tthis.bindOutputTexture(M_out, (N_out + pad_out)/4, out);\n\n\tthis.context.drawElements(this.context.TRIANGLES, /*num items*/6, this.context.UNSIGNED_SHORT, 0);\n\n\tthis.unbindInputTexture(this.context.TEXTURE0);\n};\n\n/* extract a portion of a texture into another texture\n */\nWebGL.prototype.submatrix = function(N, M_out, N_out, stride, offset, texture0, out){\n\n\tthis.program = this.submatrix_program;\n\tthis.selectProgram(this.program);\n\n\tvar pad = this.getPad(N),\n\t\tpad_out = this.getPad(N_out);\n\n\t// in the shader M and N describe rows and columns in the *output*, respectively\n\tvar N_gl = this.context.getUniformLocation(this.program, \"N\"),\n\t\tpad_gl = this.context.getUniformLocation(this.program, \"pad\"),\n\t\tN_in_gl = this.context.getUniformLocation(this.program, \"N_in\"),\n\t\tpad_in_gl = this.context.getUniformLocation(this.program, \"pad_in\"),\n\t\toffset_gl = this.context.getUniformLocation(this.program, \"offset\");\n\t\tstride_gl = this.context.getUniformLocation(this.program, \"stride\");\n\n\tthis.context.uniform1f(N_gl, N_out);\n\tthis.context.uniform1f(pad_gl, pad_out);\n\tthis.context.uniform1f(N_in_gl, N);\n\tthis.context.uniform1f(pad_in_gl, pad);\n\tthis.context.uniform1f(stride_gl, stride);\n\tthis.context.uniform1f(offset_gl, offset);\n\n\tthis.bindInputTexture(texture0, this.context.TEXTURE0, \"X\");\n\n\tthis.bindOutputTexture(M_out, (N_out + pad_out)/4, out);\n\n\tthis.context.drawElements(this.context.TRIANGLES, /*num items*/6, this.context.UNSIGNED_SHORT, 0);\n\n\tthis.unbindInputTexture(this.context.TEXTURE0);\n};\n\n/* combine two smaller textures into a larger texture\n   M - input rows\n   N - input columns\n */\nWebGL.prototype.combine = function(M, N, stride, texture0, texture1, out){\n\n\tthis.program = this.combine_program;\n\tthis.selectProgram(this.program);\n\n\tvar N_out = N * 2,\n\t\tpad = this.getPad(N),\n\t\tpad_out = this.getPad(N_out); // = (pad * 2) % 4\n\n\t// in the shader M and N describe rows and columns in the *output*, respectively\n\tvar N_in_gl = this.context.getUniformLocation(this.program, \"N_in\"),\n\t\tpad_in_gl = this.context.getUniformLocation(this.program, \"pad_in\"),\n\t\tstride_gl = this.context.getUniformLocation(this.program, \"stride\");\n\n\tthis.context.uniform1f(N_in_gl, N);\n\tthis.context.uniform1f(pad_in_gl, pad);\n\tthis.context.uniform1f(stride_gl, stride);\n\n\tthis.bindInputTexture(texture0, this.context.TEXTURE0, \"A\");\n\tthis.bindInputTexture(texture1, this.context.TEXTURE1, \"B\");\n\n\tthis.bindOutputTexture(M, (N_out + pad_out)/4, out);\n\n\tthis.context.drawElements(this.context.TRIANGLES, /*num items*/6, this.context.UNSIGNED_SHORT, 0);\n\n\tthis.unbindInputTexture(this.context.TEXTURE0);\n};\n\nWebGL.prototype.bindInputTexture = function(texture, textureUnit, name){\n\tvar gl = this.context,\n\t\tprogram = this.program;\n\n\tgl.activeTexture(textureUnit); // gl.TEXTURE0, gl.TEXTURE1, etc\n\tgl.bindTexture(\t  gl.TEXTURE_2D, texture);\n\n\tvar sampler = gl.getUniformLocation(program, name);\n\tgl.uniform1i(sampler, textureUnit - gl.TEXTURE0);\n\n};\n\n/*  Create a shader program based on a pass through vertex shader and\n\tthe supplied operation specific fragment shader.\n\n\tfragmentShaderSource - string containing the fragment shader source code.\n\tshader will recieve `vec2 outTex` with texture coordinates from the pass\n\tthrough vertex shader.\n */\nWebGL.prototype.createProgram = function(fragmentShaderSource){\n\tvar gl = this.context,\n\t\tfragmentShader;\n\n\t// compile the provided fragment/texture shader\n\tfragmentShader = gl.createShader(gl.FRAGMENT_SHADER);\n\tgl.shaderSource(fragmentShader, fragmentShaderSource);\n\tgl.compileShader(fragmentShader);\n\n\t// did it compile correctly?\n\tif (gl.getShaderParameter(fragmentShader, gl.COMPILE_STATUS) == 0)\n\t\tthrow new Error(gl.getShaderInfoLog(fragmentShader));\n\n\t// link the program specific fragment shader and the generic pass through\n\t// shader into a program\n\tvar program = gl.createProgram();\n\tgl.attachShader(program, this.vertexShader);\n\tgl.attachShader(program, fragmentShader);\n\tgl.linkProgram(program);\n\n\treturn program;\n};\n\nWebGL.prototype.selectProgram = function(program){\n\n\tvar gl = this.context;\n\n\t// set calculator program to current shader program\n\tgl.useProgram(program);\n\n\tthis.bindVertices(program);\n};\n\n/* setup required to draw a square to our vertex shader and have\n   fragment shader called for each pixel\n */\nWebGL.prototype.bindVertices = function(program) {\n\tvar gl = this.context,\n\t\trenderer = program;\n\n\t// bind vertices\n\tvar position = gl.getAttribLocation(renderer, WebGL.POSITION_UNIFORM_NAME);\n\tvar vertexBuffer = gl.createBuffer();\n\tgl.bindBuffer(gl.ARRAY_BUFFER, vertexBuffer);\n\n\t// define a square that covers the screen\n\tvar vertices = [-1.0, -1.0, 0.0,\t// bottom left\n\t\t\t\t\t 1.0, -1.0, 0.0,\t// bottom right\n\t\t\t\t\t 1.0,  1.0, 0.0,\t// top right\n\t\t\t\t\t-1.0,  1.0, 0.0];\t// top left\n\tgl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertices), gl.STATIC_DRAW);\n\tgl.vertexAttribPointer(position, /*item size*/3, gl.FLOAT, false, 0, 0);\n\tgl.enableVertexAttribArray(position);\n\n\t// bind texture cords\n\tvar texture = gl.getAttribLocation(renderer, WebGL.TEXTURE_UNIFORM_NAME);\n\tvar texCoords = gl.createBuffer();\n\tgl.bindBuffer(gl.ARRAY_BUFFER, texCoords);\n\tvar textureCoords = [0.0, 0.0,\n\t\t\t\t\t\t 1.0, 0.0,\n\t\t\t\t\t\t 1.0, 1.0,\n\t\t\t\t\t\t 0.0, 1.0];\n\tgl.bufferData(gl.ARRAY_BUFFER, new Float32Array(textureCoords), gl.STATIC_DRAW);\n\tgl.vertexAttribPointer(texture, /*item size*/2, gl.FLOAT, false, 0, 0);\n\tgl.enableVertexAttribArray(texture);\n\n\t// index to vertices\n\tvar indices = gl.createBuffer();\n\tgl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, indices);\n\t// tesselate square into triangles\n\t// indeces into vertex array creating triangles, with counter-clockwise winding\n\tvar vertexIndices = [0, 1, 2,\t// bottom right triangle\n\t\t\t\t\t\t 0, 2, 3];\t// top left triangle\n\tgl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(vertexIndices), gl.STATIC_DRAW);\n};\n\n/* create RGBA texture of width w/4 from given texels\n   padding the width of each row to a multiple of 4, where necessary.\n\n   if texels is null, an empty texture is created.\n\n   alternative to textures?\n   http://stackoverflow.com/questions/17203508/webgl-hardware-skinning-with-a-bone-texture\n */\nWebGL.prototype.createDataTexture = function(h, w, texels){\n\n\tvar gl = this.context;\n\n\tvar PAD_TEMPLATE = [0.0, 0.0, 0.0, 0.0]; // value to pad remainder with\n\n\tvar rem = (w % WebGL.COMPONENTS_PER_TEXEL),\n\t\tpad = rem == 0 ? 0 : WebGL.COMPONENTS_PER_TEXEL - rem;\n\n\t// create the texture from our floats\n\tvar texture = gl.createTexture();\n\n\tgl.bindTexture(\t  gl.TEXTURE_2D, texture);\n\t/*\n\t// https://www.opengl.org/wiki/GLAPI/glPixelStore\n    gl.pixelStorei(gl.UNPACK_ROW_LENGTH, w/4);\n    gl.pixelStorei(gl.UNPACK_ALIGNMENT, 1);\n\n\tsee also: https://www.opengl.org/wiki/Common_Mistakes#Creating_a_complete_texture\n\t*/\n\tif(pad == 0 || texels == null || typeof texels === 'undefined'){\n\t\t// no padding required, write directly from input array\n\t\tgl.texImage2D(\t  gl.TEXTURE_2D, 0, gl.RGBA, (w + pad) / WebGL.COMPONENTS_PER_TEXEL, h, 0,\n\t\t\t\t\t\t  gl.RGBA, gl.FLOAT, texels);\n\n\t} else {\n\t\t// must pad each row\n\n\t\t// create empty texture\n\t\tgl.texImage2D(\t  gl.TEXTURE_2D, 0, gl.RGBA, (w + pad) / WebGL.COMPONENTS_PER_TEXEL, h, 0,\n\t\t\t\t\t\t  gl.RGBA, gl.FLOAT, null);\n\n\t\tvar full_texel_row_len = w - rem,\n\t\t\tfull_row_texture_width = full_texel_row_len / WebGL.COMPONENTS_PER_TEXEL;\n\n\t\tvar row_start = 0;\n\t\tvar last_texel = new Float32Array(PAD_TEMPLATE);\n\t\tvar row, remainder;\n\n\t\t// set texture data, one row at a time, padding each row to a multiple\n\t\t// of the texel length\n\t\tfor(var i = 0; i < h; i++){\n\t\t\trow_start = i * w;\n\t\t\tfull_texel_row_end = row_start + full_texel_row_len;\n\t\t\trow = new Float32Array(texels.buffer, row_start * texels.BYTES_PER_ELEMENT, full_texel_row_len);\n\t\t\tif(full_texel_row_len > 0){\n\t\t\t\t// https://www.khronos.org/registry/webgl/specs/latest/1.0/index.html#TEXSUBIMAGE2D\n\t\t\t\tgl.texSubImage2D(gl.TEXTURE_2D,\n\t\t\t\t\t 0,\t\t\t\t\t// mip-map level\n\t\t\t\t\t 0,\t\t\t\t\t// x-offset\n\t\t\t\t\t i,\t\t\t\t\t// y-offset\n\t\t\t\t\t full_row_texture_width,\t// width\n\t\t\t\t\t 1,\t\t\t\t\t// height\n\t\t\t\t\t gl.RGBA,\t\t\t// format\n\t\t\t\t\t gl.FLOAT,\t\t\t// type\n\t\t\t\t\t row\t\t\t// data\n\t\t\t\t );\n\t\t\t}\n\n\t\t\tremainder = new Float32Array(texels.buffer, full_texel_row_end * texels.BYTES_PER_ELEMENT, rem);\n\t\t\tlast_texel.set(remainder); // copy remaining data\n\n\t\t\tgl.texSubImage2D(gl.TEXTURE_2D,\n\t\t\t\t 0,\t\t\t\t// mip-map level\n\t\t\t\t full_row_texture_width, // x-offset\n\t\t\t\t i,\t\t\t\t// y-offset\n\t\t\t\t 1,\t\t\t\t// width\n\t\t\t\t 1,\t\t\t\t// height\n\t\t\t\t gl.RGBA,\t\t// format\n\t\t\t\t gl.FLOAT,\t\t// type\n\t\t\t\t last_texel\t\t// data\n\t\t\t );\n\t\t}\n\t}\n\n\t// clamp to edge to support non-power of two textures\n\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n\n\t// don't interpolate when getting data from texture\n\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n\n\t// we're done with setup, so unbind current texture\n\tgl.bindTexture(gl.TEXTURE_2D, null);\n\n\treturn texture;\n};\n\n/* Create a (padded) texture suitable for reading into an array with readPixels.\n\tUNSIGNED_BYTE\n   Can be passed to bindDestinationTexture.\n\n   Returns an unsigned byte RGBA texture (other formats are not yet supported\n\ton most platforms, see WEBGL_color_buffer_float extension)\n */\nWebGL.prototype.createOutputTexture = function(h, w) {\n\tvar gl = this.context;\n\n\tvar pad = this.getPad(w);\n\n\t// create and bind texture to render to\n\tvar destTexture = gl.createTexture();\n\t//gl.activeTexture(gl.TEXTURE2);\n\tgl.bindTexture(gl.TEXTURE_2D, destTexture);\n\tgl.texImage2D(gl.TEXTURE_2D,/*level*/0, gl.RGBA, w + pad, h, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);\n\n\t// clamp to edge to support non-power of two textures\n\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n\t// don't interpolate when getting data from texture\n\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n\n\t// we're done with setup, so unbind current texture\n\tgl.bindTexture(gl.TEXTURE_2D, null);\n\n\treturn destTexture;\n};\n\n/* Set up output\n\n\tM - number of rows in output\n\tN - number of columns in output\n\tdstTex - texture for holding the output\n */\nWebGL.prototype.bindOutputTexture = function(M, N, texture) {\n\tvar gl = this.context;\n\n\t// set canvas and viewport size\n\tthis.canvas.height = M;\n\tthis.canvas.width = N;\n\tgl.viewport(0, 0, N, M);\n\n\t// create and bind framebuffer\n\tthis.framebuffer = this.framebuffer || gl.createFramebuffer();\n\n\tgl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffer);\n\n\tgl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, /*level*/0);\n\n\n\tif( gl.checkFramebufferStatus(gl.FRAMEBUFFER) != gl.FRAMEBUFFER_COMPLETE)\n\t\tthrow new Error(\"Bound framebuffer is not complete.\");\n\n\treturn this.framebuffer;\n};\n\nWebGL.prototype.unbindInputTexture = function(textureUnit){\n\tvar gl = this.context;\n\n\tgl.activeTexture(textureUnit);\n\tgl.bindTexture(gl.TEXTURE_2D, null);\n};\n\n/* Read data out as unsigned bytes */\nWebGL.prototype.readData = function(M, N){\n\tvar gl = this.context;\n\n\t// create destination buffer\n\trawbuffer = new ArrayBuffer(M*N*Float32Array.BYTES_PER_ELEMENT);\n\n\t// read the result into our buffer, as bytes\n\tprod = new Uint8Array(rawbuffer);\n\tgl.readPixels(0, 0, N, M, gl.RGBA, gl.UNSIGNED_BYTE, prod);\n\n\t// return raw result bytes\n\treturn rawbuffer; // M x N\n};\n\n// how many extra elements do we need to fill up a pixel?\nWebGL.prototype.getPad = function(N){\n\n\tvar rem = (N % WebGL.COMPONENTS_PER_TEXEL),\n\t\tpad = rem == 0 ? 0 : WebGL.COMPONENTS_PER_TEXEL - rem;\n\n\treturn pad;\n};\n","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n","var WebGL = require('./webgl');\n\n/*  Linearize onto Kernels, a transformation similar to im2col, which\n\ttransforms the input to a convolution kernel into a row.\n\n\tX - input data\n\tk - kernal width\n\tstride - number of elements between beginnings of patches\n\n\n\twebgl - a weblas.WebGL object\n\tstandalone - whether or not to automatically run the floating point encode\n\t\tstep for rendering to an UNSIGNED_BYTE texture (this is required for\n\t\tmobile, circa 2015) but can't be used as part of a pipeline.\n\n\t* uploads and downloads data\n\t* executes calculation\n */\nfunction SLOKNCalculator(webgl, standalone){\n\tthis.webgl = webgl,\n\tthis.standalone = (standalone != null) ? standalone : true; // default to standalone mode\n\n\tvar p = \"precision highp float;\\n#define GLSLIFY 1\\n\\nvarying vec2      outTex;  // texture coords of row/column to calculate\\nuniform sampler2D X;       // texture with data from padded A\\nuniform float     factor;  // width of image patch\\nuniform float     stride;  // width between image patches\\nuniform float     margin;\\nuniform float     N_p;     // patches across\\nuniform float     M;\\nuniform float     N;\\nuniform float     pad;\\nuniform float     M_in;\\nuniform float     N_in;\\nuniform float     C;       // number of channels in input\\nuniform float     pad_in;\\n\\n// select an element from a vector based on index\\nfloat select_index_1540259130(vec4 v, int index){\\n\\tfloat val;\\n\\tif (index == 0) {\\n\\t\\tval = v.r;\\n\\t} else if(index == 1) {\\n\\t\\tval = v.g;\\n\\t} else if(index == 2) {\\n\\t\\tval = v.b;\\n\\t} else if(index == 3){\\n\\t\\tval = v.a;\\n\\t} else {\\n\\t\\t// should never be here\\n\\t\\tval = 0.0;\\n\\t}\\n\\n\\treturn val;\\n}\\n\\n// translate a linear index into x, y coordinates for a matrix\\nvec2 linear_index_coords_1604150559(float linear_index, float row_length){\\n\\tvec2 coords;\\n\\n\\tcoords.x = floor(mod(linear_index + 0.5, row_length)); // column\\n\\tcoords.y = floor((linear_index + 0.5) / row_length); // row\\n\\n\\treturn coords;\\n}\\n\\n// set pad values to 0.0, if in padded region of output texture\\nvoid fix_pad_1117569599(inout vec4 v, int pad){\\n\\tv.a = 0.0;\\n\\tif(pad == 2){\\n\\t\\tv.b = 0.0;\\n\\t} else if(pad == 3){\\n\\t\\tv.b = 0.0;\\n\\t\\tv.g = 0.0;\\n\\t}\\n}\\n\\nvoid main(void) {\\n\\n\\t// get the implied row and column from .y and .x of passed (output)\\n\\t// texture coordinate\\n\\tfloat row_t = outTex.y;\\n\\tfloat col_t = outTex.x;\\n\\n\\t// row corresponds to patch\\n\\tfloat row = floor(row_t * M) + 0.5;\\n\\t// column corresponds to placement in patch\\n\\tfloat col_0 = floor(col_t * (N + pad) - 1.5); // index of first element in output pixel (matrix space)\\n\\n\\t// N_p = patches across\\n\\tfloat col_patch = floor(mod(row, N_p)); // column index in grid of patches\\n\\tfloat row_patch = floor(row / N_p); // row index in grid of patches\\n\\tfloat col_in_0 = (col_patch * stride - margin) * C; // input column index of left element in patch\\n\\tfloat row_in_0 = row_patch * stride - margin; // input row index of top element in patch\\n\\n\\tvec4 pixel_in;\\n\\tvec4 result = vec4(0.0, 0.0, 0.0, 0.0);\\n\\tvec2 coords = linear_index_coords_1604150559(col_0, factor * C); // coords inside patch\\n\\tvec2 ncoords;\\n\\tint channel_in = int(mod(col_in_0 + coords.x, 4.0));\\n\\tvec2 scale_in = vec2(1.0/(N_in + pad_in), 1.0/M_in); // scale from matrix to input texture coords\\n\\tvec2 offset_in = vec2(col_in_0 + 2.0 - float(channel_in), row_in_0 + 0.5); // offset into patch (and pixel)\\n\\n\\tconst vec2 pixel_scale = vec2(1.0/4.0, 1.0); // scale from matrix to pixel coords\\n\\n\\tpixel_in = texture2D(X, (coords + offset_in) * scale_in);\\n\\n\\t// go through channels for current output pixel\\n\\tfor(int channel = 0; channel < 4; channel++){\\n\\n\\t\\t// are we on a new input pixel?\\n\\t\\tncoords = linear_index_coords_1604150559(col_0 + float(channel), factor * C);\\n\\n\\t\\t// are we in the margin or outside the input texture?\\n\\t\\tif((col_in_0 + ncoords.x + 0.5 < 0.0) || (row_in_0 + ncoords.y + 0.5 < 0.0) ||\\n\\t\\t   (col_in_0 + ncoords.x + 0.5) > (N_in) || row_in_0 + ncoords.y + 0.5 > M_in){\\n\\t\\t\\t// yes, create a virtual pixel\\n\\t\\t\\tpixel_in = vec4(0.0, 0.0, 0.0, 0.0);\\n\\t\\t} else if(floor(ncoords * pixel_scale) != floor(coords * pixel_scale)){\\n\\t\\t\\t// no, get the get the next real pixel\\n\\t\\t\\tcoords = ncoords;\\n\\t\\t\\toffset_in.x += float(channel_in);\\n\\t\\t\\tchannel_in = 0;\\n\\t\\t\\tpixel_in = texture2D(X, (coords + offset_in) * scale_in);\\n\\t\\t}\\n\\n\\t\\tif(channel == 0){\\n\\t\\t\\tresult.r = select_index_1540259130(pixel_in, channel_in);\\n\\t\\t} else if(channel == 1){\\n\\t\\t\\tresult.g = select_index_1540259130(pixel_in, channel_in);\\n\\t\\t} else if(channel == 2){\\n\\t\\t\\tresult.b = select_index_1540259130(pixel_in, channel_in);\\n\\t\\t} else {\\n\\t\\t\\tresult.a = select_index_1540259130(pixel_in, channel_in);\\n\\t\\t}\\n\\n\\t\\tchannel_in++;\\n\\t\\toffset_in.x -= 1.0;\\n\\t}\\n\\n\\t// fix padded region\\n\\tif(pad > 0.0 && col_0 + 4.0 > N ) {\\n\\t\\tfix_pad_1117569599(result, int(pad));\\n\\t}\\n\\n\\t//gl_FragColor = vec4(row_in_0, col_in_0, channel_in, N_p);\\n\\tgl_FragColor = result;\\n}\\n\";\n\n\t// create the webgl shader program for this calculation\n\t// based on the specific fragment shader for this calculation\n\t// and the generic pass through shader\n\tif(this.standalone){\n\t\tthis.program = this.webgl.createProgram(s);\n\t} else {\n\t\tthis.program = this.webgl.createProgram(p);\n\t}\n}\n\nmodule.exports = SLOKNCalculator;\n\n/* Names of the uniforms (variables) used in the shader program passed in on\n   each calculation.\n */\nSLOKNCalculator.TEXTURE_UNIFORM_NAME_0 = \"X\";\nSLOKNCalculator.STRIDE_UNIFORM_NAME = \"stride\";\nSLOKNCalculator.KERNEL_WIDTH_UNIFORM_NAME = \"factor\";\n\n/* Elementwise scale and offset a matrix\n\n\tM - number of rows in X\n\tN - number of columns in X\n\ta - scalar coefficient to X\n\tb - scalar offset of X\n\tX - matrix (texture)\n\tout - output (texture)\n\n  How this works:\n\n  1. Activate our shader program\n  2. Bind input textures\n  3. Set shader program parameters\n  4. Bind output texture\n  5. Activate calculation with `drawElements`\n\n */\nSLOKNCalculator.prototype.calculate = function(M, N, channels, M_out, N_out, N_p, factor, stride, margin, X, out){\n\n\tvar gl = this.webgl.context;\n\n\tvar pad = this.webgl.getPad(N * channels),\n\t\tpad_out = this.webgl.getPad(N_out);\n\n\tthis.webgl.selectProgram(this.program);\n\n\t// create and bind our input texture using matrix data\n\tthis.bindInputTexture(X, gl.TEXTURE0, SLOKNCalculator.TEXTURE_UNIFORM_NAME_0);\n\n\t// set the data specific variables in our shader program\n\tthis.bindUniforms(M_out, N_out, pad_out, M, N * channels, channels, pad, N_p, factor, stride, margin);\n\n\t// create our destination texture\n\tif(this.standalone){\n\t\tthis.webgl.bindOutputTexture(M_out, N_out + pad_out, out);\n\t} else {\n\t\tthis.webgl.bindOutputTexture(M_out, (N_out + pad_out)/ 4, out);\n\t}\n\n\n\t// initiate calculation\n\tgl.drawElements(gl.TRIANGLES, /*num items*/6, gl.UNSIGNED_SHORT, 0);\n\n\tthis.webgl.unbindInputTexture(gl.TEXTURE0);\n\n};\n\n/* Create a texture from the given texel data and bind it to our shader program.\n\n\ttexture - texture containing the data\n\ttextureUnit - the texture unit to bind to (gl.TEXTURE0, gl.TEXTURE1, etc)\n\tname - the uniform name to associate with (must match shader program)\n\n\tmust compile program (with createProgram) first\n*/\nSLOKNCalculator.prototype.bindInputTexture = function(texture, textureUnit, name){\n\tvar gl = this.webgl.context,\n\t\tprogram = this.program;\n\n\tgl.activeTexture(textureUnit); // gl.TEXTURE0, gl.TEXTURE1, etc\n\tgl.bindTexture(\t  gl.TEXTURE_2D, texture);\n\n\tvar sampler = gl.getUniformLocation(program, name);\n\tgl.uniform1i(sampler, textureUnit - gl.TEXTURE0);\n\n};\n\n/* Set up inputs for the texture shader\n\n */\nSLOKNCalculator.prototype.bindUniforms = function(M, N, pad, M_in, N_in, channels, pad_in, N_p, factor, stride, margin) {\n\tvar gl = this.webgl.context;\n\n\t// get var locations\n\tvar M_gl = gl.getUniformLocation(this.program, \"M\"),\n\t\tN_gl = gl.getUniformLocation(this.program, \"N\"),\n\t\tc_gl = gl.getUniformLocation(this.program, \"C\"),\n\t\tM_in_gl = gl.getUniformLocation(this.program, \"M_in\"),\n\t\tN_in_gl = gl.getUniformLocation(this.program, \"N_in\"),\n\t\tstride_gl = gl.getUniformLocation(this.program, SLOKNCalculator.STRIDE_UNIFORM_NAME),\n\t\tfactor_gl = gl.getUniformLocation(this.program, SLOKNCalculator.KERNEL_WIDTH_UNIFORM_NAME),\n\t\tpad_gl = gl.getUniformLocation(this.program, \"pad\"),\n\t\tpad_in_gl = gl.getUniformLocation(this.program, \"pad_in\"),\n\t\tN_p_gl = gl.getUniformLocation(this.program, \"N_p\");\n\t\tmargin_gl = gl.getUniformLocation(this.program, \"margin\");\n\n\t// bind length of shared dimension\n\tgl.uniform1f(M_gl, M);\n\tgl.uniform1f(N_gl, N);\n\tgl.uniform1f(pad_gl, pad);\n\tgl.uniform1f(M_in_gl, M_in);\n\tgl.uniform1f(N_in_gl, N_in);\n\tgl.uniform1f(c_gl, channels);\n\tgl.uniform1f(pad_in_gl, pad_in);\n\tgl.uniform1f(N_p_gl, N_p);\n\tgl.uniform1f(factor_gl, factor);\n\tgl.uniform1f(stride_gl, stride);\n\tgl.uniform1f(margin_gl, margin);\n\n};\n"]}